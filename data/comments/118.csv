,username,comment_created_utc,comment_score,comment_text
0,matejdro,1627987458.0,66.0,I wish they included salary per country. Median salary across the whole world is not really a good indicator.
1,koreth,1627947495.0,315.0,"Wish they included development team size in addition to total company size.

As a developer, working in a 50-person company consisting of 30 developers and 20 non-developers is _extremely_ different than one consisting of 5 developers and 45 non-developers. Both kinds of companies exist, but I have no idea how common they are relative to each other."
2,Vietname,1627954057.0,90.0,"> Clojure developers have the highest median salary, 14k more than second place which belongs to F#.

How the hell is Clojure the highest, and by that large of a margin?"
3,morkelpotet,1627942981.0,134.0,"Why is Cassandra so dreaded? I'm thinking of using it to improve scaling. Given our high write load, Postgres is starting to fail us."
4,swoleherb,1627967646.0,49.0,its a bit weird mixing frontend and backend frameworks together
5,captain_obvious_here,1627980327.0,16.0,"So, I have a few questions about Rust:

* Is it a good choice to build webapps, for someone usally relying on Node.js?
* Is it easy to deploy on a K8S~ish environment?
* How does one start learning Rust?"
6,RedShift777,1627953846.0,58.0,Kubernetes numbers surprise me. I personally havent had enough dealings with it to form an oppinion either way but colleagues of mine from from the past few years that have seem to treat it as some sort of necessary evil.
7,Atraac,1627970248.0,47.0,TIL there are Crystal jobs
8,apocolypticbosmer,1627951846.0,231.0,Anybody choosing plain JS when typescript is available is just a damn masochist
9,,1627995754.0,9.0,[deleted]
10,,1627937842.0,413.0,"I don't understand. How is it that Rust reigns supreme as most loved? Are *that* many developers using Rust? I like the concept, but I've never built anything outside of the tutorial Guessing Game.

What about Web Frameworks? Svelte? Never heard of it.

""While Neovim is the most loved editor it is the 10th most wanted editor."" *Excuse me?* I am a Vim nerd as much as the next guy (sorry Emacs), but I use Intellij and VS Code in 99% of circumstances.

I'm not denying their data. I'm just wondering: how far out of the loop am I?"
11,brubakerp,1627946389.0,33.0,No love for Fortran huh?
12,UltraPoci,1627938944.0,76.0,Happy to see Julia that high on the list
13,RedPandaDan,1627947578.0,78.0,"Basically anyone who uses Rust right now (me included, I'm learning it at the moment and enjoying it) is using it voluntarily, as more and more get forced to use it that will come tumbling down. Loads of languages are fantastic in their own way but years of being forced on people has poisoned their reputation, (my favourite language, XSLT, being one example) the same will happen with rust.

That being said, the language itself seems really well designed, and cargo is pretty great so far, so it might be able to limit any negativity to specific crates."
14,Sevla7,1627944465.0,69.0,"The old man JAVA apparently is having a hard time these days. 

It seems that the new generations don't like this language very much."
15,,1627949865.0,46.0,[deleted]
16,UrgentlyNeedsTherapy,1627944959.0,115.0,"TypeScript is fucking bae to be fair.

Rewrote the frontend for the project I took over to be all TypeScript because raw JavaScript is terrible and should only be coming out the ass-end of a transpiler in my honest opinion."
17,BigBlackHungGuy,1627940939.0,82.0,And here I am using C# like a sucker.
18,chumba_wamba1,1627970041.0,5.0,extremely happy to see FastAPI so high up on the loved vs dreaded frameworks section! :D
19,rpd9803,1627986233.0,4.0,Rust and typescript? Looks like rust and clojure to me.
20,CityYogi,1627955379.0,30.0,No love for Go? Recently started using it and it is pretty cool.
21,serg473,1627973850.0,20.0,"Oh no, hipsters who came from Go who came from Ruby got bored and moving on to something new again... Anyway."
22,ttmp3,1628010869.0,2.0,"It's funny to see ""IBM cloud"" perceived as the most dreadful cloud platform. I had very bad experience with them personally. 

Last year I saw exciting news that Power cpu would be avaialable on IBM cloud.  I signed up for trial. I couldn't find the details on what cpus are the ECs using, so I fired 2 VMs on different configurations to see its CPU info. 10 minutes later I was force to log out and found out I was banned, and no reason was given whatsoever . They send five emails to me,  including signing up, creating VMS and bill notificaiton. But no email on why my account was banned. This is the most bizzare experience I have ever seen on any platform."
23,sumsarus,1628071473.0,2.0,People like APL more than C++? What kind of alien planet is this?
24,Aoxxt2,1628079673.0,2.0,Most loved but hardly ever used and no robust libraries even after all this time. Cute fad.
25,Kinglink,1627952256.0,13.0,"Confirmed.  Rust, Python and Typescript need the most help, and thus the most representation on Stack Overflow."
26,dom96,1628004026.0,4.0,It's really frustrating that Nim isn't an option in this survey when for example Crystal is.
27,tachoknight,1627948780.0,16.0,"I utterly _despise_ these surveys; all they do is detract from the fact that the ultimate goal is to _solve the problem_. In the end nobody cares what the program was written in as long as it does what they need it to do. Rust? Python? C? Fortran? BFD...if the lander gets to the right spot on the moon, as long as the plane lands successfully, as long as the company knows where to spend its money, it doesn't matter one iota whether how you got the result. 

True story: a friend of mine started a company based on a product written in Microsoft Access that was bought by a big-you've-heard-of-them company. It was well written given what Access provided (2.0 no less!) but the ultimate point was that is _solved the problem customers were having_. That alone was what gave big-you've-heard-of-them the justification to spend the money that as my friend sipping drinks on the beach of his private island."
28,,1627978560.0,-4.0,"Another useless survey with a bunch of vaguely defined parameters and even more useless rankings and charts made by people who don't know shit  about either programming or basic statistics. Only first year college grads and wannabe programmers on Reddit give a fuck about these (or Rust). Most ""dreaded"" vs ""loved"", my arse."
29,leimy,1627958502.0,-7.0,I don’t like either python or rust.
30,InvisibleEar,1627949346.0,-37.0,Rust is a circlejerk
31,Dokiace,1627988392.0,0.0,"I see that typescript is being used a lot in the backend, it makes sense because it's strongly typed, but what about the language itself? Is JS really good enough for server side application?"
32,XhoniShollaj,1627980555.0,1.0,"Marketing Professionals at $127, 500?"
33,chr0n1x,1628042740.0,1.0,yay in the <7% using...Ruby. and I legitimately love it too🥺
34,lenkite1,1628064876.0,1.0,"Wonder whether Rust will still be ""most loved"" when it gets large scale adoption. You always love the hobby language you code in outside of work..."
35,Ok-Investigator3257,1628271074.0,1.0,I work on low level embedded systems. I can’t tell you how nice it is to have a C like language that understands the stupidity of developers and pointer math.
36,illathon,1627957171.0,-24.0,Typescript isn't really a language
37,LB--,1627960033.0,-3.0,"Nice! This is giving me Pikmin vibes.

EDIT: WTF Reddit, this isn't the post I commented on! This comment was made while I was looking at https://redd.it/owr8mv and Reddit put it on this post instead for some reason :("
38,lexpattison,1627957278.0,-5.0,https://madnight.github.io/githut/#/pull\_requests/2021/2
39,ryuukk_,1628040150.0,-2.0,"GO more ""dreaded"" than rust? 

yeah.. i doubt we can trust this ""survey"" with such low sample size and weird results"
40,1way2improve,1628000621.0,6.0,"Yeah, I wish they made it at least more detailed. Split into regions like North America, Western Europe, Eastern Europe, Asia, the whole world, etc. Compared backend frameworks to backend frameworks instead of comparing React to Spring (like, what?). Showed most related technologies to each language. For instance, like, most of Clojure devs use Postgres, Docker and a bit of TypeScript (I really have no idea, just an example).

I don't think it's that hard to implement. But it would be more useful, I guess"
41,7sidedmarble,1627990053.0,1.0,There's a us selector at least. Although I wish it saw my IP was in the us and picked that by default.
42,watsreddit,1627999937.0,21.0,"Agreed. Also size of the codebase you work on matters a lot, too. I would expect that the popularity of dynamically-typed languages would be inversely proportional to the size of the codebase."
43,,1627978795.0,-60.0,What does it matter? It's a complete bullshit survey made by people who don't know any basic statistics and exclusively designed for getting clicks and shared on social media. Only college grads and wannabe programmers on Reddit who have a lot of time in their hands actually care about this. This sub is just lately full of clickbait bullcrap like this.
44,,1627995948.0,-4.0,[deleted]
45,Frozen_Turtle,1627960968.0,71.0,"During my job hunt earlier this year, my F# offers were ~50% more than my C# offers.... and my Clojure offer was ~15k more than my highest F# offer. And I didn't even know Clojure at the time! That one might be a bit of an outlier though as it was a series B fintech... but who knows ¯\\\__(ツ)_\_/¯"
46,devraj7,1627966662.0,31.0,"Inversely proportional to popularity. The smallest the mindshare, the higher the salary.

Good luck getting a job in that field, though."
47,ragnese,1627998411.0,7.0,"I don't get it either. I *like* Clojure, and I think it's awesome that it's got its niche, but I don't get why it's so ""valuable"".

The first thing that pops into my mind is that the data is easily skewed because there are so few Clojure shops. Maybe it's just one or two big firms that are paying super high salaries, and they *happen* to be Clojure shops, which would drag the average up."
48,squirtle_grool,1627961035.0,49.0,"Clojure shops tend to value software engineers more highly, on average, than, say, C# shops. 

Also supply and demand. Most people who see clojure are disgusted by it at first sight. A LISP? Like in 1970? This is too many parentheses. And that's it for them. Not many stick around to learn it. Those who do often don't want to write code in any other language after that, except out of necessity.

I've written production code in D, FORTRAN, Groovy on Grails, Swift, Clojure, a couple of assembly languages, and then the common ones that everybody knows. Clojure is by far my favorite.

Edit: a word"
49,yxhuvud,1627981413.0,19.0,Selection bias. You are not going to find junior work doing Clojure.
50,matthieum,1627985918.0,6.0,"Median salary by language is a nonsensical number in general.

Salaries do not really depend on the language, they depend on the domain and the company. Salaries in FinTech tend to be higher, for example, so if you have a technology that's mostly used in FinTech (don't know if that's the case for Clojure) it would have a higher median salary... but this doesn't mean much because if you use the technology in another domain, your salary will be based on the median for the domain, and just learning the technology doesn't guarantee you a spot in FinTech.

It's also notable that good developers, in my experience, tend to have an easier time picking up another language, and be more willing to do so, and therefore ""small"" languages tend to have a disproportionate amount of better paid developers. As the technology matures, and becomes more widespread, this advantage disappears, once again underlining the fact that the good developers/median salaries are a matter of domain/industry/company, not one of a technology.

And of course, this also explains Dart. It's small, but it's mostly used in very popular domains (web, mobile) where salaries are nothing special, and therefore the median Dart salary is nothing special either."
51,MyNaymeIsOzymandias,1627992876.0,1.0,Can someone explain how that graph works? Is the average Java developer out there really making ~$50k/year? Or is there more to that graph that I missed.
52,MrSqueezles,1628003631.0,0.0,Of the people who responded to the survey...
53,RudeHero,1627968707.0,37.0,"cassandra is fantastic for what it's intended for.

people that don't really understand their use case, don't understand databases, or have a sort of.... ""everything looks like a nail"" mentality, are right to fear it.

cassandra is for uptime and for transactional data- lots of inserts, single-row deletes and updates, and reads from within your partition key.

leave the reporting queries and batch/bulk operations to mysql/postgres.

the fact that cassandra is NoSQL at all makes junior SQL developers furrow their brow, and the ways that it's more powerful makes junior NoSQL developers afraid. this sort of 'love/dread' poll is always a little silly."
54,lordcirth,1627957455.0,20.0,Have you considered CockroachDB?
55,figuresys,1627945314.0,78.0,"What do you do, if i may ask? (As in, what industry are you writing software for?)

We had a realtime database of millions of writes per second in Postgres and there were challenges with it, but not enough to warrant a move, so I'm curious."
56,kirbyfan64sos,1627957596.0,11.0,"You may want to also check out ScyllaDB which is entirely Cassandra-compatible but far more efficient (they do take reliability seriously as well, including [funding their own Jepsen tests](https://jepsen.io/analyses/scylla-4.2-rc3))."
57,liveoneggs,1627949917.0,10.0,[tombstones are scary](https://docs.datastax.com/en/dse/5.1/dse-arch/datastax_enterprise/dbInternals/archTombstones.html)
58,captain_obvious_here,1627980090.0,1.0,"My company (multi-billion dollars Telco/ISP) invested heavily in Cassandra when it started becoming a serious offer.

We had plenty of use-cases where our databases (MySQL and Postgres mostly) were having a hard time, despite the fact we operate them really well and customize them to our specific needs (homemade drivers and all).

After years of usage and optimization, Cassandra ended up being underwhelming in most cases, annoyingly inefficient in a few cases...but incredibly GREAT in a few, with the right logic (which isn't an easy thing to get) and the right (high-end, aka expensive) hardware.

So I would say Cassandra is a great tool for specific (write-heavy use-cases) when you know how to install, operate and use it."
59,burningEyeballs,1628010461.0,1.0,"Cassandra is a really subtle nightmare. Here are the stages of using it. 

1.	This is awesome. We should totally ditch Postgres to leverage cassandras inherent awesomeness!
2.	Wow this is really hard and nothing works. 
3.	Wow this is starting to make sense and nothing works. 
4.	Stuff starts to work and you think that success is close (savor this moment, this is right before your world goes to shit)
5.	Everything works and it is slow. 
6.	Lots of tweaking later it is faster, but still not what you need. 
7.	You start rationalizing how this isn’t the sunk cost fallacy 
8.	You begin to wonder if this is going to cost you your job
9.	You abandon Cassandra but not before explaining how no one could have seen your problems coming
10. You do the walk of shame as you go back to Postgres

LOTS of companies have tried to make Cassandra work and very very few of them actually succeed long term. I’m not saying you will fail, but the odds are not in your favor."
60,pancomputationalist,1627983851.0,13.0,The difference might shrink over time if hybrid framework like NextJS or Blazor take over.
61,noXi0uz,1627976310.0,3.0,Yeah it bothers me every year..
62,elmuerte,1628001036.0,-1.0,"That's what I've been saying about NodeJS for a long time, but I keep getting downvoted."
63,,1627984079.0,15.0,[deleted]
64,lanklaas,1627990234.0,15.0,"I came from nodejs to rust.

1. I now use rust for web app backends, but it took me about a year to understand the borrow checker good enough to develop web app servers. The upside is that rust's async runtimes are multithreaded where the node event loop is single threaded (haven't looked into the new workers yet). Also the strong type system makes my servers much more robust
2. I have deployed a couple of services to k8s. I use a multi stage build with cargo-chef to build and then copy the binary to the container. The nice thing is that the containers are small. Mine is usually about 10MB if I don't care about making it smaller.
3. I started the hard way by just building web servers and trying to brute force my way past the borrow checker. If you go this way, try just cloning everything until you start getting the hang of the borrows. That would have saved me some headaches.

Also coming from node, you do not leak memory as easily in rust as you can in node."
65,ragnese,1627999380.0,10.0,"It's probably not the *best* for webapps, but it's really not bad like some people will say. They'll say ""OMG so slow to develop. The borrow checker, blah blah."" 

There's a (moderately steep) learning curve, but even if you just ""clone"" everything in a Rust web-app, you're going to get great performance compared to Node and you're going to have a really excellent type system and the best standard library of any language I've used (and I've used a bunch)."
66,swoleherb,1627987881.0,0.0,"you don't need the rust speed for a web app, plus development time is slow."
67,,1627991191.0,-2.0,[deleted]
68,Mexicancandi,1627983762.0,0.0,"For 3, it helps to start with another low level language like cpp first so you can understand what rust does different, why it does it and to understand low level obtuse code in the first place. If you already know cpp you can read the official doc, it teaches you everything from the perspective that you know low level programming syntax. 
 For the other 2, idk but be aware that despite the heavy ""rust is awesome and works great everywhere circle-jerk"" rust has fewer support and is generally less supported than other more ubiquitous languages like cpp or python."
69,clearlight,1627971490.0,33.0,"I’m one of the kubernetes lovers. There’s a learning curve but once it’s running, it makes complex things simple. It works and is reliable."
70,big_twig_tow,1627955223.0,43.0,"K8S is a container orchestration engine, not a general purpose programming language."
71,MathMXC,1627965077.0,3.0,If you already use docker it's a breaze to deploy too. And has great scaling/reliability out of the box
72,humoroushaxor,1627988350.0,5.0,"Kubernetes is becoming the operating system of the cloud and people shouldn't be scared. Helm allows me to install my apps, observability, HA databases, or end-to-end encryption with a single command.

I personally love Kubernetes and don't find it overly complex at all. It's an incredibly powerful abstraction for developers that want to own their operations or ops folks that are ready to embrace a code-first culture. Folks that love their pet servers or button pressing in AWS probably won't love it so much."
73,ILoveOldFatHairyMen,1627973461.0,6.0,"1. Kubernetes is overly complex. Doing anything requires a degree. Labels, annotations, selectors, namespaces with unusual semantics... all of them are used to configure your software, and god knows how this actually works.

2. If you have a stack ""software + kubernetes + helm"" good luck finding out which one doesn't work. Also, stackoverflow doesn't cover your specific use case.

3. Most kubernetes software works ""automagically"". In other words, if you want to change anything, you're fucked, because configuration is beyond cryptic.

I use both Kubernetes and native AWS tools. Whenever the pure AWS stack needs an improvement, it's a normal job. Whenever the kubernetes stack needs an improvement, I instantly have a bad day."
74,yxhuvud,1627981533.0,8.0,"Not many, sadly."
75,user_8804,1627996103.0,4.0,I thought your meant Crystal Reports so I was like yeah obviously. Then I remembered Crystal as a language..
76,baddad25,1627953855.0,41.0,I agree :( I did this 8mo ago and I've been regretting it SO hard for the past month or so since I used TS for a new project for the first time
77,laidlow,1627961785.0,11.0,Yeah I had to work in an ES5 only project with no ability to add Typescript support recently and after 2 months I was sooo happy it was over. Got it done but I banged my head so much more along the way and I could have finished the work a lot quicker in Typescript.
78,ragnese,1627998649.0,10.0,"I *mostly* agree.

However...

Adding TypeScript does bring in added complexity to the build system (to be fair, your build system was probably going to be a nightmare already, so what's the difference?). And using JSDoc comments with an aware IDE *does* get you a lot of the way there for many projects.

You have to be a little careful with TypeScript giving you a false sense of security, too. It has crazy type variance gotchas, for example."
79,BOOPFREN,1627984527.0,36.0,"Anybody who uses Typescript without first taking the time to learn how to use it properly is an damn masochist. I've worked with too many developers in the past who have evangelized a language as the be all and end all solution only to find they don't really know how to use it.

Switch from Javascript to Typescript, but only if you know Typescript or have the time to learn how to use it properly, if I see one more `any` in a code review I'm going to lose my mind, defeats the whole point of using Typescript in the first place."
80,sandrelloIT,1627975535.0,13.0,"This is almost always true when starting long-living projects that have to be maintained over time. However, for quick and dirty stuff, scripts or proof of concepts, plain JS seems totally reasonable to me, expecially if you're somewhat experienced with the language and its quirks."
81,MisterFor,1627972722.0,5.0,"It depends. If the project is small there is no need for all the configuration (and long term maintenance of that config) overhead needed for TS. But a big project with JS can be a nightmare to refactor or understand.

Also, working with react in JS feels super clean and with TS for me the types are a nightmare. But for example in Angular is a joy. So it depends.

I like both depending on the case."
82,reboog711,1627992560.0,2.0,"I have friends that claim that TypeScript is all syntactical sugar over JS and provides no real benefit.

I also assume they must write all their code in binary, because assembly language is just some syntactical sugar on top of that, right?"
83,bacondev,1627968400.0,-3.0,"I don't mind it… as long as I can use ES6 features. Then again, I've never tried TypeScript. Ignorance is bliss, I suppose. I just really don't like type information in my source code, as I feel that it's often clutter. Now, if I could throw such information into a stub file on the other hand…"
84,ILikeChangingMyMind,1627954035.0,-42.0,"Spoken like someone who is ignorant of VS Code's (*amazing*) type inference capabilities.

You can have all the great toys (they are just that, toys; I wouldn't go so far as to say anyone's a masochist for not using them), like automatic imports, `CTRL+click` to go to a variable definition, autocomplete suggestions for arguments, etc.  ... all without writing a single line of explicit type definition."
85,ThePantsThief,1627969809.0,1.0,Someone please tell this to the Pianola developer.
86,skhds,1627994035.0,1.0,"I honestly don't like transpiled code, especially when javascript is already high-level. I'm using ReactJS right now, but I actually miss using plain JS with jQuery.."
87,yesman_85,1628003815.0,1.0,Welcome to the react library community.
88,minegen88,1627983668.0,-5.0,Or they just hate creating a billion interfaces all the time....
89,wllmsaccnt,1628540069.0,2.0,"Its not a good way to live, but it can be a good way to get paid...if you pick the right stack."
90,alibix,1627938244.0,419.0,"Most loved doesn't mean most used. So, you can love something but not be able to use it for a multitude of good/bad/neutral reasons. The most used language according to that survey is JavaScript and the most used framework is React"
91,Caesim,1627938593.0,64.0,"Those things are mostly with a small but strongly opinionated userbase. Most people have some experience with C/C++/Java or frameworks like Spring or Django or whatever. So respondents vote on them either way, positive or negative.

But more niche things have mostly been used by their userbase and in these cases love them. That's why I think these data points are a bit misleading."
92,Karma_Policer,1627938510.0,74.0,"Most loved simply means that it has the greatest percentage of users satisfied with it, regardless of how many users. If you want to check how many people are actually using Rust, there are other metrics in the survey that are a better representation. I also like to estimate how popular languages are by the number of Github stars in some of the most popular projects written in those languages. One thing that surprised me the last time I checked is that rustc is growing faster than clang by the number of lines of code.

""Reigns supreme"" is justified because Rust has always won Most Loved ever since its 1.0 release."
93,argh523,1627945512.0,26.0,"> Are that many developers using Rust?

The ""most loved"" means people who are using rust right now want to continue using it.

> Which programming, scripting, and markup languages have you done extensive development work in over the past year, and which do you want to work in over the next year? (If you both worked with the language and want to continue to do so, please check both boxes in that row.)"
94,nilamo,1627938449.0,77.0,"Not everyone uses Stack Overflow.  And, of those people, not everyone fills out surveys.  Sure it's still a lot of people, but I don't think it's representative of the actual majority of developers.  

Svelte, for example, shows 71.47% loved, but that's only 1,240 responses.  React is only slightly lower on the list, at 69.28%, but it has over 10 times as many people voting for it (17,525)."
95,nayhel89,1627980796.0,6.0,"I like the explanation in this blog post: [Green Vs. Brown Programming Languages](https://earthly.dev/blog/brown-green-language/)  
Basically, there is a strong correlation between how loved/dreaded a language or technology is on StackOverflow and the size of its legacy codebase."
96,AdditionalMarten,1627946991.0,12.0,"In the Stack Overflow survey, “most loved”/“most dreaded” is, among people using this technology, who wants to keep using it vs. who wants to stop using it."
97,TheTomato2,1627947233.0,39.0,"Its really simple. Rust is in the honeymoon phase so to speak. People who are using Rust are *choosing* to use it.  Nobody is *forced* to use Rust yet afaik. If Rust gets more wide spread and more people are forced to use Rust it will go down event if it's not deserved. Its a complicated unmanaged language that is meant to replace C++, there is no way it stays at the top."
98,imzacm123,1627948419.0,30.0,"I might be biased because I love using rust, but from what I've seen online and experienced, there are two main types of developers that have spent time using rust:

1. The ones that are still fighting the compiler and trying to use it like their usual language, these developers typically don't love rust but they don't hate it either

2. The ones that have learned to get along with the compiler and have picked up new methods of doing things that result in safer and more efficient code (which can often be translated into other languages), these developers tend to love or at least appreciate rust

Almost everyone in the second category (including me) has been through the first category and come out the other side, I couldn't understand why so many people enjoyed using it a couple years ago, then I tried it and still couldn't understand, but then after a break from it and trying again, something clicked and I now find myself missing it every time I use JavaScript for work"
99,wildjokers,1627940739.0,12.0,">  but I use Intellij

IntelliJ has a nice VIM plugin (IdeaVIM) gives you the best of both worlds. 

VSCode also has a VIM plugin and it is usable but its search with '/' doesn't work right. But it is passable."
100,vegetablestew,1627950964.0,11.0,"For Rust is the taking higher level abstractions down to systems programming level. It is an attractive proposition.

For Svelte, it occupies a very interesting space with a tried and true solution: Compilation. It offers the component-based architecture like Angular, React and Vue. It offers a drastically simpler API that allows for two-way binding, with most of the performance and abstractions for reactive code taken care of by the compiler, which is a breath of fresh air for those coming from the footgun-ridden React hooks. Lastly, unlike React, Angular and Vue, I think Svelte is better at making just plain websites, not just apps. Making plain old websites using the aforementioned trio sometimes seems like overkill, but not with Svelte. Most of the time it just feels like writing plain JS but with components.

For Neovim, I think it is a combination of language server and tree sitter that makes a competitive alternative to IDEs or IDE-lite such as VSCode. Take a look at [LunarVim](https://github.com/ChristianChiarulli/LunarVim) if you are interested."
101,,1627945347.0,22.0,"Probably because no one has had to do a big enterprise project in rust.  Especially a legacy one.  Every language is fun when it's for new or side projects, and every language sucks for large old projects."
102,miembro_maniaco,1627955549.0,4.0,"You're the first person I heard of that likes Vim but doesn't use it 99.9% of circumstances. We all have our biases in our environment, so I can't tell which of us is the odd one out, but I'm surprised."
103,lelanthran,1627947610.0,7.0,">  How is it that Rust reigns supreme as most loved? 

First, not enough legacy code exists to make developers hate it. All Rust code is new projects, all developers prefer new projects.

Second, love != used. The fact that it has 87% love vs 7% usage should tell you something.

Third, it has plateaued this year in terms of love and usage gains (same gains as last year) which makes me think Rust usage is leveling off, because C++ has seen increased usage while C usage has been basically steady since last years survey.

Love for C, OTOH, has increased more than the love for Rust. All in all, not a good outlook for Rust.

(Shameless plug: I did a blog post on new languages and the features they bring before the 2021 SO survey: http://www.lelanthran.com/simply_wordy/articles/the_average_developer_effect/main.html)"
104,tektektektektek,1627954762.0,6.0,"> How is it that Rust reigns supreme as most loved?

Make something difficult to use, and only those who love it will use it."
105,,1627940483.0,3.0,[deleted]
106,bitwize,1627953442.0,0.0,The Rust Evangelism Strike Force are putting their fingers on the scale.
107,JanneJM,1627949117.0,1.0,"""Most loved"" is the percentage of *users* that love it. It's not really related to the total number of users."
108,ACuriousBidet,1627965592.0,1.0,"I agree with you

Then again, I also didn't participate in the survey"
109,FunctionalRcvryNetwk,1628000774.0,1.0,"You’re not out of the loop. The survey is mostly completed by cargo cult developers.

Rust is loved because of memory safety. 99% of the people who write that sentence have no clue what that actually means though."
110,lanzaio,1627962115.0,-3.0,"> I am a Vim nerd as much as the next guy (sorry Emacs), but I use Intellij and VS Code in 99% of circumstances.

lol you're not a ""Vim nerd"" if you use Intellij and VSCode 99% of the time. I only use neovim for all my work. I don't actually really know how to use an IDE."
111,Eightstream,1627966327.0,0.0,With these sorts of surveys I always read ‘most loved’ as ‘most fashionable’
112,Xerxero,1628000721.0,0.0,"It’s people that looked at it for a few hours and liked what they saw from the tutorial. 

Maybe they should ask the people that liked it so much, how much time and LoC they did with it."
113,02d5df8e7f,1627938894.0,-10.0,"Spacemacs with LSP is far superior to anything you can achieve with Vim, and is sometimes on par with actual IDEs. I thought it to be impossible but LSP is no joke."
114,emannnhue,1627948720.0,1.0,"No idea. I've used a lot of tools over the years. I like emacs, and I use it for work as well. As time goes on it's hard to be as comfortable anywhere else."
115,Raknarg,1627975980.0,1.0,think it's talking about proportions. Rust may not be the most used but among the people who use it it's loves more per Capita than java
116,ShetlandJames,1627977997.0,1.0,"> Svelte? Never heard of it

Are you plugged into the programming ecosystem? This was the most recent JS framework to get hyped up high."
117,TheDiamondCG,1628001718.0,1.0,"As someone who has used both Rust and Svelte, I can tell you that they're amazing!

&#x200B;

Svelte is easy to learn, and in most scenarios, can easily replace React as a much simpler (and faster) solution. With the advent of things like SvelteKit you can have webpages that are rendered server-side instead of client-side (client-side = the components are generated on page load, vs server-side = the components are already there, only the dynamic components are generate at runtime)

&#x200B;

Rust is very, very NOT easy to learn (borrow checker), but it is very nice to work with. My favorite Rust feature (or design aspect?) is the explicit error handling. Rust has made me hate `try { } catch { }` statements and honestly the solution they brought forward is just so much better (and less verbose). The explicit error handling makes you think about errors where you otherwise wouldn't have, allowing you to make much more stable and bug-free applications, allowing you to handle almost all edge cases (or all the edge cases that you CAN handle, anyways). My least liked feature is that they decided that the C conditional `(condition ? if true : if false)` looks ugly and decided, instead, to replace it with a standard if statement (rather verbose).

```rs
// What could have been this
let my_thing: bool = (thing2 == 2 ? true : false);
// Becomes this instead
let my_thing: bool = 
  if(thing2 == 2) { 
    true 
  } 
  else { 
    false 
  }
```

It also comes with a built-in package manager, Cargo. Cargo ships crates that can directly integrate into your Rust project. To use Cargo's features, you need to set up a Rust project using `cargo init`. This just sets up a small directory with a `Cargo.toml`, and an `src` folder which contains your actual code (a small hello world script, by default). Then you can compile everything using `cargo build`. Much simpler than C(++)... on the other hand, the C languages are not as brain-racking when learning them as Rust.

On another note, adding to its ability in making rock-solid stable applications, it has integrated testing built right in. Just add `#[test]` on top of any function and it will automatically become a test, which will (as long as you have set up a project) run if you run `cargo test`, making testing delightfully simple."
118,Jmc_da_boss,1628013012.0,1.0,You’ve never heard of svelte?
119,myringotomy,1628026945.0,1.0,Svelte is awesome. You should give it a try.
120,skulgnome,1628039208.0,1.0,The R-word hype train has a high passenger-to-power ratio.
121,met0xff,1627945524.0,-3.0,"Yeah the problem is really that for languages people have to use at work more will downvote it. While for, say, Rust most using it are doing it as a hobby or introduced it to their company and therefore will give an upvote.
The people who tried learning it and didn't like it don't fall in the ""currently using it"" group.

Pretty similar for Julia - I know a lot who tried it and said yeah nice but doesn't fit what I need and left again (like me). So I wouldn't call myself using Julia."
122,,1627966722.0,-11.0,"1. I think Rust is liked because Mozilla funds and markets it. It's legitimately a trash language but has a popular parent.  
2. This is blowing my mind but 62% of the people programmed <10years. Make sense they like trash. They don't know better"
123,rnw159,1628006188.0,0.0,https://blog.discord.com/why-discord-is-switching-from-go-to-rust-a190bbca2b1f
124,Decker108,1627977959.0,8.0,"The 1950's called, they want their language back."
125,tjl73,1627984033.0,4.0,"Fortran is still one of the best languages for doing numerical computing.

I remember trying to use C++ for my Master's. I was going to have to bridge between two different vector class implementations, one for the linear algebra library and another for the PDE one. I decided it would be a lot easier to just do it in Fortran where vectors are built-in."
126,valarauca14,1628139641.0,1.0,"    PROGRAM REDDIT_POST
        PRINT *, 'For anything other than numerical computing', &
               &'fortran is a bit verbose, and has some weird', &
               &'opinions'
    END PROGRAM REDDIT_POST"
127,Karma_Policer,1627939447.0,70.0,"I'm writing my most important personal project in Julia. The language does have many annoying warts, but they are being fixed very quickly and the community is small but focused.

I love Python, but I'm glad to never have to use it again for numerical code. Unfortunately, the world is cursed and the industry will never leave MATLAB."
128,metaden,1627958543.0,0.0,"I have been using Julia since 0.4 days. But I’m afraid it is not trying hard enough to break out of its niche. But the growth in the last year, is awesome. 550 respondents in 2020 to 1100 in 2021. In comparison, elixir was no where in 2020, this year it blasted past Julia."
129,rodrigocfd,1627986883.0,14.0,"> as more and more get forced to use it that will come tumbling down

Exactly. Specially when the projects start to grow and the compilation times start to become a productivity bottleneck (in my personal experience, worse than C++ compile times)."
130,Kirk_Kerman,1627952011.0,-17.0,I just want multiline comment support
131,ObscureCulturalMeme,1627945614.0,141.0,"The language is doing fine.

The biggest provider **of** that language, Oracle, has some fucktacularly scary license terms.  At least, if you're a corporate legal consult, reading the license terms and imagining their legendary audit team paying your office a visit.  ""More lawyers than developers"" was coined to describe them in particular, remember.

Trying to convince large organizations to move past Java 8 -- released 7 years ago, and long past EOL for Oracle commercial support -- is like squeezing blood from a turnip.  They can't decide whether they're more scared to go with one of those ""weird sounding Linux-related"" provider companies, or more scared of migrating to a modern LTS version like 11 or 17.  So in true scared corporate fashion, they do neither.

And precisely no programmer enjoys staying on version 8 while interesting new features get added to 9, 10, 11, 12, 13, 14, 15, 16, 17, and 18."
132,humoroushaxor,1627945417.0,27.0,I have to think it's a barrier to entry thing. With NodeJs and Python developers can just run. And there's packages for everything. I find enterprise development in any language besides Java much less enjoyable though.
133,chris_was_taken,1627966333.0,7.0,"The new generations build everything on AWS, which is a whole lotta java"
134,WJMazepas,1627950507.0,15.0,"There is a lot of alternatives to Java these days, like Kotlin or C#, also im pretty sure that a lot of developeres are tired to work with Java 8, which most companies like to use"
135,ILikeChangingMyMind,1627945448.0,36.0,"It's slow to develop in, with lots of boilerplate and wasted code (interface this, class that).  And I'm not just some Java-hater, I used to code (and enjoy coding) in it professionally.

But the simple truth is that you can write something like 40 lines of Java in 20 lines of Python or Javascript (depending of course on what lines we're talking about). *Certainly* write speed isn't the most important metric of a language ... but all else being equal, you certainly don't want to have to write a lot of unneeded code either.

Plus, thanks to the beauty of the JVM, you don't have to write Java to leverage it.  That company where I used to write Java switched to Ruby precisely to speed up dev, but thanks to the JVM (and JRuby) we could get that speed increase while still accessing all of our Java libraries.

Java's future is in the JVM, not the language itself."
136,t0bynet,1627953560.0,2.0,"It just lacks features compared to C# in my opinion - sure, at the moment the language is progressing faster than in the past but good luck getting any of that progress if you still have to use an older version."
137,Paradox,1627945953.0,-6.0,I just dont like Java because everything is 5 times more verbose than it needs to be. Its like the language was designed to require an IDE
138,ragnese,1627998944.0,1.0,"Good.

We collectively need to dump these old languages that encourage bugs. Java, C, C++, PHP, JavaScript- they need to go.

I respect history. These languages served a purpose. They were the right tools for a time. Just like steam engines were the right tools for a time. Just like leeches were medicine. That's all great. But it's not for today."
139,instanced_banana,1627973143.0,1.0,"As someone who has worked on Android apps, if someone paid me I wouldn’t mind to work on Java, but certainly if I had a choice I’d pick Kotlin"
140,ep1939,1628029000.0,0.0,"Good. 20 years of software development where Java reigned supreme clearly show that OOP is complicated, non intuitive, poorly defined and hard to get right."
141,TheIncorrigible1,1627951372.0,142.0,"> what part of python do you dread

Writing a project that has more than ~1KLoC or uses packages without type annotations."
142,Decker108,1627977416.0,17.0,"* Working in a team with a mix of Windows, Mac and Linux users
* Discovering that the problem being solved with Python is CPU-intensive instead of IO-intensive
* Lack of static typing

Like others have pointed out, I enjoy it a lot for small scripts and tools, but not at all for large projects."
143,,1627960461.0,36.0,[deleted]
144,mrbaggins,1627975474.0,30.0,"Whitespace being key characters  
loose types  
the `__name__` convention  
the blurry line between interpreter and independent programs"
145,jagoosw,1627979892.0,3.0,"Extremely slow (https://github.com/jagoosw/Conways-Game),
Miss mash of packages with different styles and conventions,
Horrible and eclectic library installation and management"
146,Pelera,1627987126.0,3.0,"I don't dread Python, I just have different languages I prefer for nearly every project aside from short scripts. This is ""dread"" according to the survey results (but not the actual question asked in the survey)."
147,gempir,1627972455.0,4.0,"OOP is hell in python if you are used to the classic OOP models of C#, PHP or Java. 


So many unexpected things happen in that model. It's not the fastest language. The thing it has going for it is it's easy to read.

I like python for little scripts, some glue code, but writing big applications in python is a no for me."
148,squirtle_grool,1627960168.0,12.0,"1. v3 is not backwards compatible with v2. So you can't run Python code from inside... Python.
2. Every computer I own has both versions installed. On some, running ""python"" runs v2. On others, v3.
3. Package management sucks. Similar version problems with pip/pip3. Pip isn't installed by default when you install python. On a windows machine, the whole thing is a nightmare. Dependencies aren't automatically pulled in when you run the code.
4. Variables can be declared simply through assignment. If I see a=3, I don't know whether something is being mutated that is being used elsewhere.
5. Mutability by default. Most Python code I've seen mutates state everywhere, making the code difficult to hold to reasonable standards of quality and readability.

Most importantly: v3 is not backwards compatible! This is really unbelievable to me.

Eta: I do reasonably enjoy coding in Python. It's possible to write good, clean, robust code concisely. But of course, the language has problems, as do all others."
149,Legion4444,1627967298.0,3.0,"Honestly, being forced to tab a certain way for loops and if statements instead of purely for readability. I like my {}'s what can I say."
150,lordcirth,1627956970.0,4.0,"The loose typing, presumably. Type errors should be caught at compile time, not runtime, and the correct response to ""5 + '5'"" is a type error, not '55'."
151,_Pho_,1627994120.0,2.0,"Virtual environment garbage, dependency management, PHP-level-bad type hinting support, annoying OOP-on-steroids patterns being used everywhere, anyone spewing Zen of Python dogshit, having to write template methods to console/print stuff in a dynamically typed language, having extra commas change the variable type from string to dict or whatever. The only way I can imagine Python being fun is if you haven't discovered TypeScript"
152,ep1939,1628028843.0,1.0,"> Also, what part of python do 32% of you dread?

Lack of a serious static compiler, e.g."
153,i8beef,1627951934.0,85.0,"Typescript is like being asked to move a pile of shit, but someone gave you a shovel so you don't have to use your hands. Its still Javascript."
154,Fatal_Oz,1627947829.0,34.0,"I agree with this so much, I didn't think it would be a big deal but I can never go back to vanilla JS"
155,Lt_486,1627949166.0,18.0,I like to use TS for both frontend (Angular/React) and backend (NodeJS).
156,,1627947839.0,15.0,This thread is a clear example of the ts hype
157,Division2226,1627962195.0,2.0,I really need to get on board with typescript. Someone recommend me the best video course to learn it please
158,ILikeChangingMyMind,1627945806.0,-34.0,"Static typing has *both* costs and benefits.  Anyone telling you it only has one or the other is lying.

Typescript *is* good for some projects, but Javascript is *also* good for some projects. If you believe that you everyone's projects are the same as your's, you can easily get the false impression that everyone should use the same tech you use ... but it'd be a *false* impression.

**EDIT:** Wow.  All I can say is if you can't see that *any* technology has costs, you've drunk too much of its kool-aid.  EVERY tech has costs, and having to write explicit types is a meaningful cost when it provides no benefit ... which *is* the case in many projects.  Many projects *can* benefit from TypeScript ... and many others are better off with JS.

Every project in the world is not the same as your's, and not every project in the world should use the tech you use.  I've used vanilla JS, and I've used Typescript (professionally!), and I can state with certainty that I'm able to develop small projects, prototypes, etc. faster without having to write explicit types."
159,pheonixblade9,1627974772.0,0.0,looking forward to the day when wasm matures a bit and we can just compile typescript straight to it
160,c-digs,1627948728.0,62.0,"The thing that does not compute is that 

* ASP.NET Core is the second most loved web framework
* .NET Core/.NET5 is the most loved among ""Other frameworks and libraries""

Are people out here building .NET Core apps in VB.NET? F#?

I would imagine that the majority of folks working in ASP.NET Core/.NET Core are using C#."
161,,1627943795.0,178.0,"C# is great, idk why you think you’re a sucker"
162,Runamok81,1627949989.0,36.0,"You're not a sucker.  It's weird, but C# is is having a renaissance.  When dotnet core went open-source and cross platform, they brought C# to a whole new audience.  I happily run C# on Linux. Recently, the C# language authors have been been making things more approachable - dare I say pythonic -  for newcomers by cutting back on ceremony and just letting us get crackin' at writing code ...Examples: C#9 = [top-level statements](https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9#top-level-statements), C#10 = [global usings](https://medium.com/young-coder/a-closer-look-at-5-new-features-in-c-10-f99738b0158e), etc ..."
163,Frozen_Turtle,1627943081.0,54.0,"The only bad thing about C# is that its not F#

But hey, it's trying!"
164,Carson-Drive,1627944823.0,70.0,"The only suckers are those clinging to languages with no major market share and just going after the hype, pretty much all those top \*cough cough\* most loved languages on the survey. 

C# is a golden language, it's Microsoft's main baby, used in many different areas, and there are lots of jobs for it out there."
165,Lt_486,1627949105.0,-9.0,"I did a lot of C# and C++. I think TypeScript/NodeJS is an improvement over  C#/.NET, and Rust is a cleaner version of C++."
166,Alikont,1627945832.0,-24.0,C# is the most meh language by all metrics in the survey.
167,comfort_bot_1962,1627971240.0,1.0,Nice!
168,Decker108,1627979290.0,39.0,"I use Go daily and love is way too strong a word. The word I'd rather use is ""boring"". I mean, it definitely solves problems, it's fast, it's easy to distribute and it's typically very predictable, but it's verbose and contains seemingly none of the PLT advances of the last four decades.

I used it back in 2015 to make a 2D game and it felt like a good choice. Except for the fact that the game no longer compiles, because at that time the Go community's definition of good dependency management was linking directly to the latest commit on master in a Github repo ¯\\_ (ツ)_/¯"
169,asmx85,1628023658.0,3.0,"Not to drive you away from it or anything, people can have very different opinions on how they weigh different pro and cons. Just for your convenience to get a rounder picture on why some people have problems with Go https://fasterthanli.me/articles/i-want-off-mr-golangs-wild-ride"
170,clearlight,1627971663.0,7.0,I’ve been coding professionally for 15 years. Golang is really nice. Can’t wait to use it more. Great toolkit and the single binary for deployment is excellent. It scales well too with great performance. Used it recently for a basic REST API with mongodb backend and was nice and easy. Works well.
171,6769626a6f62,1627989957.0,5.0,"The main problem I've seen people complain about (all from observation, I've never touched Go), is that the language is extremely opinionated.  
  
Also, [this post](https://fasterthanli.me/articles/i-want-off-mr-golangs-wild-ride) lays out some particular grievances with that opinionated approach."
172,,1628017356.0,3.0,"As someone who was forced to switch to Go for work after spending 15 years doing other languages, it is incredibly incomplete. The standard library is missing pretty basic data structures and the tooling around the language like the 'go' command itself has left a huge sour taste in my mouth."
173,squirtle_grool,1627961139.0,1.0,"Go is really great.

Eta: Go Go!"
174,ryuukk_,1628040624.0,-4.0,"people who are using GO are busy powering the world's most popular techs and servers

people who are using Rust are busy voting on SO's surveys"
175,comfort_bot_1962,1627973867.0,-13.0,"Here's a joke! What do you call a boy named Lee that no one talks to?
Lonely"
176,umronije,1628080335.0,1.0,"My guess is: no-one has even seen a line of APL code, so they left a neutral opinion."
177,asmx85,1628024983.0,12.0,"Mhh, you have this pretty wrong

[javascript](https://stackoverflow.com/questions/tagged/javascript): 2,251,326 questions     
[java](https://stackoverflow.com/questions/tagged/java): 1,791,656 questions    
[python](https://stackoverflow.com/questions/tagged/python): 1,769,725 questions    
[c#](https://stackoverflow.com/questions/tagged/c%23): 1,491,097 questions     
[c++](https://stackoverflow.com/questions/tagged/c%2b%2b): 733,153 questions     
[c](https://stackoverflow.com/questions/tagged/c): 362,610 questions     
[typescript](https://stackoverflow.com/questions/tagged/typescript): 155,514 questions      
[rust](https://stackoverflow.com/questions/tagged/rust): 23,353 questions 

Judging by your own metric we arrive at the conclusion that Rust has the least questions, and thus needs the least help. Or rust has a pretty good [documentation](docs.rs) and [learning](https://www.rust-lang.org/learn) [material](https://cheats.rs) or a [helpful](https://users.rust-lang.org/) [community](https://www.reddit.com/r/rust/) maybe all of it."
178,aloha2436,1627968574.0,20.0,"I don’t think the intent of this survey is finding out what the best language is, it’s just data showing what opinions developers hold. 

If I’m choosing new technology today, what’s used the most and what other professional developers consider helpful is a legitimate and useful metric to draw on, so long as you don’t take it at face value. 

I think you despise how some people use the survey results, I’m not sure it’s fair to despise the survey itself."
179,SorteKanin,1627974940.0,13.0,">I utterly _despise_ these surveys; all they do is detract from the fact that the ultimate goal is to _solve the problem_.

The tools you use have a huge impact on how you solve problems and how effectively.

This applies to all fields btw, not just programming."
180,lordcirth,1627957076.0,17.0,"How do you know their ""favorite language"" isn't just the one they generally think will solve the problem best?"
181,illegible,1627952051.0,2.0,"I don't know why you're being downvoted. Every language has it's issues, but if i'm given X, it doesn't generally make sense to convert to Y, unless X is completely incapable of performing the task. Generally though most problems can be worked through except at very high levels of optimization."
182,eskimoFry,1627977751.0,1.0,"Yeah but when it comes to maintaining software, you can't just say that the room is clean and the job is done.. when the dirt still hangs out under the carpets and inside the empty flower vase and fish tank.

What I am getting at is... is the programming language hunt is trying to solve the problems of ""is it maintainable?"", ""is it scalable for big teams"", ""can the juniors in my team ramp up quickly and be productive?""

Your friend might have delivered Microsoft Access. But he is going to be wasting a lot of time and money migrating to a DB that is somewhat mainstream in the industry when the customer starts requesting modern features missing in access 2.0.

It's ultimately not as easy as saying ""solve the problem"". The problem is difficult because it is not a ""solve it and forget it"" type of thing."
183,,1627981388.0,1.0,Underrated comment
184,shogditontoast,1628026906.0,2.0,r/rustjerk
185,jrhoffa,1627950363.0,-45.0,Every downvote you receive serves only to reinforce the fact you've stated.
186,WILL3M,1627960645.0,16.0,"Why isn't it?

Programming in typescript means using the typescript language constructs."
187,coderstephen,1628172818.0,2.0,I tried Go. I hated it. I tried Rust. I liked it. Seems like a plausible result to me.
188,coderstephen,1628172829.0,2.0,I tried Go. I hated it. I tried Rust. I liked it. Seems like a plausible result to me.
189,coderstephen,1628172870.0,2.0,I tried Go. I hated it. I tried Rust. I liked it. Seems like a plausible result to me.
190,igouy,1628014060.0,1.0,"> size of the codebase

Does that matter much if hardly anything is being changed in the codebase?

Enormous stable codebase *vs* Small churning codebase."
191,Nix_and_Zotek,1628003216.0,5.0,"I agree with the click bait part, but the survey in itself is valuable (to me at least): considering hiring devs is extremely difficult, especially for us small companies with lower salaries, It is important to work with trending technologies, allowing devs to work and experiment on the tech they love rather than the old fashioned ones. Also I think trending tech improves themselves over time and online support tend to be better (considering we talk about SO, which may be the n1 dev reference website)"
192,tux-lpi,1627979915.0,20.0,"If that's all you have to say, please stop posting."
193,swoleherb,1628001473.0,1.0,instagram  enters the chat
194,notoriouslyfastsloth,1627996096.0,3.0,really? i can't find any clojure jobs that pay as well as my C# job...
195,PepegaQuen,1628008792.0,2.0,Nubank?
196,renatoathaydes,1627973920.0,8.0,"How do you explain Dart being the lowest paid though? It contradicts your theory.

It seems related to the fact that by industry, mobile developers are also the lowest paid and Dart is used extensively in mobile... perhaps Clojure just happens to be used a lot in a niche industry that pays more?"
197,Dietr1ch,1628124289.0,2.0,"It's not enough to be a small language, it has to be used in something valuable. Probably something that non-technical companies need to run, like banks or industrial processes.

I don't think that it's a good niche to try to get into though, it's a winner-takes-all situation, and I guess that people that are not already invested into it don't have a good chance when balanced against other jobs."
198,rpd9803,1627986453.0,1.0,"I dunno there’s a lot of people that assert finding clojure devs is hard, which implies to me there’s jobs if you look / find a recruiter"
199,Frozen_Turtle,1628002912.0,7.0,"This particular explanation doesn't click with me. The highest-paying jobs are FAANG (typically) and they aren't primarily Clojure shops. When I think niche and high paying, OCaml's Jane Street comes to mind... but they're so niche it's not even listed on SO's survey xD"
200,Vietname,1628000328.0,1.0,"That would make sense. I figured it had to be some kind of niche like that, I just don't know *which* niche."
201,devraj7,1627966728.0,28.0,"> Clojure shops tend to value software engineers more highly, on average, than, say, C# shops.

Highly doubt that, unless you have some sources to back this claim up.

It's just much harder to find Clojure developers because the language is so niche, it makes sense that companies would be willing to pay them more."
202,Dokiace,1627988321.0,2.0,How easy is it to find a job with clojure? Do you get approached often? Do you often get multiple offer when applying?
203,homonomonohomo,1627995376.0,5.0,"[This chart](https://insights.stackoverflow.com/survey/2021#section-salary-salary-and-experience-by-language) controls for years of experience, and even then Clojure comes out clearly on top. Of course, years of experience doesn't necessarily equal seniority.
Interesting, btw, how the numbers are close, but don't exactly match [these](https://insights.stackoverflow.com/survey/2021#technology-top-paying-technologies), wonder what's happening there."
204,1way2improve,1627999452.0,2.0,Last year there were separate diagrams world/USA. I'm disappointed they didn't make the same this year
205,squirtle_grool,1627959060.0,14.0,Cockroach is great. Non-blocking transactions are truly magnificent. Definitely worth considering if you're looking for an RDBMS that scales. I'm surprised it didn't make the survey.
206,morkelpotet,1627976717.0,4.0,"It looks very cool, but is it the right choice when write capacity is the main priority and eventual consistency is fine?"
207,morkelpotet,1627952554.0,18.0,Survey tool. Sudden influx of writes at exactly the same time.
208,FU_residue,1627951053.0,64.0,"Sorry for the impending stupid question but how on earth did you push Postgres to millions of writes per second? Are you talking about millions of writes to a single table or millions of writes to multiple tables/servers?

I've been coding a write-heavy program (in Rust) and hit a wall with Postgres, even after using prepared statements, batch transactions, multi-row inserts/deletes, and HOT updates. After some research, it seemed like Postgres was going to remain a bottleneck regardless of what I did, so I just switched to Redis for caching and let the data slowly work its way to Postgres for stronger persistence.

tl;dr I'd love to know of ways to push Postgres to millions of writes/sec, got any links?"
209,AjanPerry,1627947158.0,14.0,But it’s still single node for writes.
210,morkelpotet,1627952479.0,2.0,"Hmm. I'm thinking of moving one table to Cassandra to reduce the load on the ""brain of the operations"".

Records are generally updated 0-5 times, though occasionally more.

There is actually one scenario where 10-15 updates are likely for each entry.

So.. how bad are tombstones, and how are they bad? Storage-wise? Performance wise?

The app is highly event driven and I could easily reduce reads to when the fresh state is needed."
211,morkelpotet,1628022041.0,1.0,So.. it's [like AngularJS!](https://www.reddit.com/r/angularjs/comments/2s9mzf/my_angularjs_learning_curve_s/)
212,,1628012173.0,5.0,That is the opposite of what he is talking about.  NodeJS *is* a backend framework.
213,PancAshAsh,1627998330.0,3.0,">in C they're either char arrays or pointers to them

Point of contention, C doesn't really have the concept of an ""array,"" it's all pointers. Array indices are essentially just macros for pointer math."
214,captain_obvious_here,1627995899.0,5.0,"> web app backends

This is my exact target. Node sometimes falls short in performances for very-high or very spiky charges, and I really don't feel like scaling to dozens of machines or worse, going back to C or C++.

Rust sounds to me like a good candidate...and the comments here seems to say the same.

Thanks :)"
215,captain_obvious_here,1628002104.0,5.0,"> really excellent type system and the best standard library of any language I've used

These are two underrated things IMO.

I like Node but the JS ecosystem is not always reliable or safe. And despite all it brings I'm not a big fan of TS. So it seems to me that Rust can be a good option for me. I'm gonna give it a try :)

Thanks for your inputs."
216,ep1939,1628029237.0,1.0,What is the borrow checker?
217,TheIncorrigible1,1627992226.0,1.0,Have you used the Rocket framework? Writing WebApps in Rust feels like any other mature framework with the benefits of strong types.
218,TheIncorrigible1,1627992460.0,2.0,It is _intended_ to be a systems language which web servers very well can be seen as.
219,FunctionalRcvryNetwk,1628003327.0,3.0,"Rust is most definitely not a C replacement.

No developer that likes C will like rust (for the reasons they like C). People like C because it is dead simple. Rust is the exact opposite."
220,captain_obvious_here,1627996039.0,2.0,"I have an ok C++ background, and that's actually why I don't want to go back to it. It's awesomely powerful, but it sucks to write and debug.

Rust looks quite good. Thanks :)"
221,MDSExpro,1627984007.0,15.0,"My opinion is exactly opposite - it makes simple thing (scheduling) very complex, especially since it handles only easiest variant of scheduling - no oversubscription, no swap support, barely handles GPUs, not to mention other hardware.

Number of things you need to bolt on on top of kubernetes to get production ready environment is mind boggling.

Containers are great, kubernetes - not so much."
222,AliciaBytes,1628097746.0,1.0,Do you have a recommendation for learning kubernetes?
223,watsreddit,1628000274.0,0.0,"Funnily enough, k8s is probably the most unreliable part of our software."
224,RedShift777,1627955586.0,21.0,"I know but I just hear from colleagues that it's a bit of a pain to work with. So seeing it's ""loved"" numbers that high wasn't something I expected to see that's all."
225,thebarheadedgoose,1628000582.0,3.0,"Whenever I hear somebody complain about its complexity I wonder how they would design something ""simpler"" that solves the same set of problems. In my experience it makes so many things so much simpler to do. I'd be curious to see the experience level and background of people who don't like it."
226,UncontrolledManifold,1627981906.0,15.0,"It’s complex because it serves a wide variety of diverse use-cases, but you can write simple k8s object specs too. It’s also one the most well-documented and battle-tested software systems in the industry. I really disagree with almost all of this; it sounds like you’re just impatient and don’t like to read the documentation, instead giving into the frustration at having to use a sophisticated system."
227,somebodddy,1627992713.0,2.0,There should be more crystal related jobs in the drug dealing market.
228,twigboy,1627960555.0,20.0,"On the plus side, the switch to ts from js is fairly smooth and you'll iron out bugs along the way"
229,ep1939,1628028411.0,0.0,"> And using JSDoc comments with an aware IDE does get you a lot of the way there for many projects.

I see this thing repeated all over but no.

Having some more linting in your file because you're leveraging the typescript compiler (that's what's processing your JSDocs in your ide) is not a substitute to statical analysis of programs.

TypeScript is an expressive but weak and inaccurate static compiler, but it's still miles ahead of the insanity of using JS.

At this point I can't but think of any webdeveloper who ""prefers"" JS as a bad dev."
230,aelesia-,1627998260.0,20.0,"eslint no-explicit-any: error

CI to fail build on error or pre commit hook to fail on error"
231,p4y,1627977381.0,11.0,"I still like using typescript for the quick and dirty stuff because of improved autocompletion. It's especially helpful for libraries i haven't used before, every interface is one less trip to external documentation."
232,ep1939,1628028525.0,1.0,"For ""proof of concepts"" that's where TypeScript shines, not JavaScript!

TypeScript lets you prove concepts without even having to write implementations, you can simply declare all of your functions."
233,skhds,1627994121.0,1.0,"No, assembly doesn't run on browsers"
234,ThePantsThief,1627969708.0,12.0,"You can…

That said, you're welcome to just omit types in some places and use them in others, I think. Tinker with the compiler settings to silence the stricter warnings. It's pretty flexible. At the very least you can use explicit `any` or `unknown`"
235,mrflagio,1627958827.0,18.0,"Static typing is about trading runtime errors for compile-time errors though.  IDEs can help with function parameters and such to an extent, but the point of Typescript is not to make IDE plugins easier to write."
236,big_twig_tow,1627955068.0,38.0,"That's great...until you write Vanilla NodeJS and have to deal with a microservices model where A calls B calls C, A/B/C are in different repos/codebases, and C calls a service with an opaque contract.  There is not a single IDE that can infer types in that scenario which is where Typescript adds a huge amount of clarity/sanity."
237,delta_p_delta_x,1627955897.0,28.0,"> Spoken like someone who is ignorant of VS Code's (amazing) type inference capabilities.

I swear, this thread is full of completely self-unaware irony. VS Code *itself* is written in TypeScript.

We have people arguing Java and C# aren't 'strict' OOP and aren't strongly-typed, and now this."
238,Aeolun,1627964283.0,7.0,"Spoken like someone that’s never worked in a codebase with more than one capitalize function.

Seriously, inference is nice, but it’s not anywhere near being explicit."
239,daftmaple,1627967668.0,4.0,"> VS Code's (amazing) type inference capabilities

Really hate to spoil it, but VSCode's JS intellisense was developed by TS team and [runs on TS server](https://github.com/microsoft/vscode/blob/main/extensions/typescript-language-features/package.json#L36). You are being **helped by TypeScript**."
240,r0ck0,1627969330.0,5.0,Spoken like someone who is ignorant of about 95% of typescript's functionally.
241,TheCactusBlue,1627972819.0,1.0,"IIRC, vscode's type inference capabilities actually makes use of parts of the typescript engine to do so."
242,alilleybrinker,1627954423.0,54.0,"[I did a quick analysis of the number of ""active"" developers in each language plotted against each language's ""loved"" percentage.](https://twitter.com/alilleybrinker/status/1422316477475135491) You're right that Rust is _not_ one of the most used. The challenge for Rust over time will be to limit the regression to the mean of its ""loved"" percentage as it gains in adoption."
243,,1627945285.0,189.0,"It’s painfully clear that most loved != most used. What is not clear is how heavily weighted “love/hate” is regardless of someone’s use.

1000 romantics who have never used Rust clicking “love” while 10 professional Rust developers may click “hate” seems to seriously screw with any meaningful data we could glean from what is ultimately made an asinine question.

Would you care to listen to my review of The Green Knight? I haven’t seen it yet but I love it.

What meaningful information would my review of a movie I haven’t seen give you other than hype? And if hype _is_ the centerpiece, how is “love” and “hate” the sensible metric? Wouldn’t it be “interested” and “disinterested”?"
244,yxhuvud,1627981752.0,2.0,"If anything, stuff that ends up being used also end up being dreaded, once the hype circle turns."
245,Nwccntwhds,1627986852.0,1.0,Yep. I love Forth.
246,NewDateline,1627942118.0,59.0,"Exactly, It's more like ""who got the more dedicated fanbase"" contest, not ""who got the biggest fanbase""."
247,Ayjayz,1627952317.0,1.0,"Uh so the programming language I wrote should have won instead? It has 100% of users satisfied with it, since I'm satisfied with it and I'm the only one using it."
248,Runamok81,1627948152.0,0.0,"That's actually a good metric, I think they should add ...  Most Loved Weighted."
249,Full-Spectral,1628009741.0,1.0,"So, lots of developers have done \*extensive\* development over the past year? That's a little questionable. Even fairly non-trivial fun-time projects would be sort of iffy as 'extensive' development since they will have little to none of the issues and constraints that commercial development does."
250,lelanthran,1627947873.0,-4.0,"> The ""most loved"" means people who are using rust right now want to continue using it.

    Which programming, scripting, and markup languages have you done extensive development work in over the past year, and which do you want to work in over the next year? (If you both worked with the language and want to continue to do so, please check both boxes in that row.)


I think you misunderstood that quote ""which do you want to work with over the next year"" does not mean ""which of the languages you have done extensive development work in would you want to use over the next year."""
251,matthieum,1627986380.0,14.0,"That's a possible explanation.

Another possible explanation is that Rust:

 - Is a breath of fresh air for C++ developers: basically the same capabilities, but much nicer to work with.
 - Empowers JS/Python/Ruby developers to get ""systems"" performance, without having to dread crashes.

In both cases, Rust offers a better alternative than what existed before, and possibly is _the best_ alternative at the moment, so naturally people would rather work with it than the other alternatives."
252,sqlphilosopher,1627954070.0,7.0,"Yes, the language has lots of things that make it objectively superior to every other current mainstream language...but it is far from perfect, and I must agree with you, 100%. No one, or at least very few, is forced to use it as of 2021. And the worst tool is always the one you are currently using."
253,coderboi,1627978742.0,1.0,"It doesn't makes sense is in the top in the first place, its syntax is as horrible as its compilation times."
254,SalemClass,1627951697.0,3.0,I use the neovim plugin for VSCode. It works very well.
255,sqlphilosopher,1627954343.0,17.0,"This is true, but it is also true that there are many new and not very used languages but only Rust is the most loved. It is because the language IS actually an improvement on many things, and brings a lot of positives to the table. Credit where it is due."
256,TheRealMasonMac,1627958612.0,0.0,"Eh, not really. It's becoming fairly well-used in big enterprise projects, though not at the scale of other languages just yet. Anecdotally, I feel this is probably because of a lack of experienced Rust developers, as it seems like most even-slightly-known developers on Reddit have already been hired by a company for their Rust abilities."
257,arendjr,1627975181.0,6.0,"I don’t think you should read too much into year-by-year comparisons. It’s not the same people who answer every year, so there can be a lot of skew just by which communities were more aware of the survey this year or the other. I think that’s why they don’t put a year-over-year comparison in the results themselves."
258,matthieum,1627986632.0,5.0,"Year-over-year comparisons are impossible because the very _methodology_ changes every year. Other sources of information (r/rust, github) show an increased usage of Rust year over year, and in general an _acceleration_.

Also, you need to be careful with percentages. For example, if Rust was 100% loved (all users want to continue using it), it would have plateau'ed by necessity (percentage-wise) but it wouldn't mean it's less loved..."
259,NewDateline,1627946928.0,5.0,"But this survey specifies everything and gives you raw data to play... At least they did for all previous surveys, the raw data release is often delayed a bit.."
260,jayroger,1627983396.0,-1.0,Stop gatekeeping.
261,backtickbot,1628001732.0,1.0,"[Fixed formatting.](https://np.reddit.com/r/backtickbot/comments/ox4vzn/httpsnpredditcomrprogrammingcommentsowmuwustack/)

Hello, TheDiamondCG: code blocks using triple backticks (\`\`\`) don't work on all versions of Reddit!

Some users see [this](https://stalas.alm.lt/backformat/h7k30ev.png) / [this](https://stalas.alm.lt/backformat/h7k30ev.html) instead.

To fix this, **indent every line with 4 spaces** instead.

[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)

^(You can opt out by replying with backtickopt6 to this comment.)"
262,steveklabnik1,1628089011.0,1.0,"You can write 

    let my_thing = thing2 == 2;

By the way. In more complex cases, sure. But you already have a bool, no need to if true else false it."
263,,1628024177.0,1.0,"No, but I've been outside of web frameworks for almost 2 years now. Mostly been in software engineering."
264,brubakerp,1628140229.0,1.0,You should check out [ISPC.](https://ispc.github.io/)
265,UltraPoci,1627939582.0,44.0,"I believe Julia will find a very nice place in the maths/physics world. There people care A LOT about performance.

It will probably not be as used where the ecosystem is what counts. That's a pity, honestly."
266,Ketta,1627944129.0,13.0,What is your complaint against Python for numerical code? Just curious. I have some projects that dabble with it but haven't made the plunge for full development.
267,tjl73,1627983628.0,1.0,"Part of the problem is the sheer number of libraries available for MATLAB. One toolbox I used in MATLAB for my Ph.D. was the System Identification toolbox which had features I couldn't find in any package in Python or elsewhere. There are hundreds of toolboxes now between the ones you can get from the company and ones that are from other people.

I should try Julia. But, I use SymPy, SciPy, and NumPy a lot. Switching to another language, especially one where I basically have to figure out calling out to SymPy is definitely more work.

I used the combination of Maple and MATLAB for years and it was really only after I didn't have a license for MATLAB and my Maple version was getting old that I spent more time with Python.

My biggest problem is needing to re-implement that System ID toolbox. I don't need it for much but I do need it if I need to expand on my thesis work."
268,xiaodaireddit,1628257066.0,1.0,what do you do in Julia? Just curious
269,UltraPoci,1627971335.0,2.0,"Why is Elixir so loved? Just curious, I know almost nothing about it"
270,jagoosw,1627980218.0,1.0,"Check out the latest JuliaCon videos, they’ve got a pretty interesting and broad range of talks"
271,RedPandaDan,1627987314.0,8.0,"That's a feature! Start compiling, go grab a cuppa."
272,Yoshanuikabundi,1627953552.0,22.0,"Rust has multiline comments:

https://doc.rust-lang.org/reference/comments.html"
273,stringbeans25,1627961635.0,21.0,Is there a reason not to use OpenJDK that I’m massively unaware of? I feel like that fixes all the headaches you mention? Unless that’s the whole move past Java 8 portion of your post
274,emannnhue,1627949049.0,39.0,"This is it for me. Java is quite nice to work with but honestly Oracle really suck. I transitioned away from Java because of them, more or less."
275,ConfusedTransThrow,1627953362.0,31.0,And on the other hand its direct competitor for forever C# is getting better Linux support provided by Microsoft and their licensing is a lot less scary
276,EscoBeast,1627964750.0,4.0,"Java 8 was released in March 2014, just under 7 and a half years ago. And according to https://www.oracle.com/java/technologies/java-se-support-roadmap.html, Java 8 is still eligible for both premier and extended support.

But yeah Java 8 is still very widely used."
277,CWagner,1627976680.0,3.0,"Java 8? That would be amazing. We have a service that can only run on 7 :D

Reason: No source, pre-compiled binaries only work on 7, the company making it was bought by SAP, and we couldn’t even afford to get the new version."
278,devraj7,1628003131.0,1.0,"That's a lot of incorrect scaremongering.

The license of OpenJDK is as permissive as can be and it's used pretty much everywhere by now, there is no requirement to ever sign any contract with Oracle.

The fear of upgrading from JDK 8 has nothing to do with Oracle or licensing and everything to do with the introduction of modules in JDK 9."
279,mntgoat,1627991305.0,0.0,"Does this mean non android Java coders haven't moved to kotlin? Guess I'm never leaving android development, kotlin has brought back the joy of coding for me."
280,Muoniurn,1628195125.0,0.0,"Why are people this disinformed???! Oracle has fucking made Java the most open it has ever been, it has the exact same fucking license as Linux. Just fucking use the latest version, it is completely free with free unlimited support, with several providers out there for optional paid support. 

And on staying with old versions: do you get free support for windows xp as well? Java 8 is fucking old, if you or your company wants to use it it can pay for that of course."
281,stringbeans25,1627962072.0,8.0,Kotlin is mostly makeup on Java. Don’t get me wrong it’s Voldemort level makeup (coroutines feel like magic with how well they work which is why I bring wizards into this) but you still need to understand the JVM for it to be an effective choice. Monitoring JVM applications and tuning for performance leaves not that much difference in the two.
282,SeesawCompetitive597,1627947573.0,38.0,Java's boilerplate issues are getting a lot better in the recent and upcoming releases
283,lelanthran,1627948035.0,63.0,"> But the simple truth is that you can write something like 40 lines of Java in 20 lines of Python or Javascript (depending of course on what lines we're talking about)

I'm not really a Java fan, but I have to say that that's an unfair comparison - the Python/Javascript solution will need to have unit tests *simply for ensuring that the correct types are passed in*.

It's easy to write less code if the resulting program is allowed to crash."
284,petesapai,1627946955.0,3.0,"Pure Java only developer here. I have a web app that uses a lot of java Graphics Library.

Can I simply use something like Python and still use those libraries?

What do you recommend for a graphical web app that is currently using Java spring in the back-end, old-time jsp in the front end?"
285,kuemmel234,1627948308.0,5.0,"Interestingly enough, at least for me, java 8+ with a few frameworks (spring/micronaut, Lombok/java15+, reactor) changed that a lot. I think in monads all the time and python is really in the way. I enjoy clever dictionary/array comprehensions, but it's, at least to me, way simpler to read and write it as map-reduce (which allows a lot more in-between).

 I end up writing closures with a lot of comprehensions and think about all the chained map-reduces I could write. If you make it too clever (that single amazing comprehension that does everything), it's hard to read, and splitting it requires at least two lines (or a lot of 'lambda this or that' boilerplate). You can do so much better than usual if you stay out of the strict OOP in java, I think.

Writing python is great fun, if I have to do something small, I'd never do it in java, but I wish it would include something like streams, or some other way to improve working with collections."
286,gobi_1,1627952535.0,3.0,"The graalvm is definitely something to watch.

Polyglot vm for java langs may be great.

And yeah I agree with everyone else, java is so verbose, it gives sickness."
287,Muoniurn,1628196203.0,1.0,Have you tried using TruffleRuby on top of the GraalVM (a research VM built in part on top of the jvm)? It is the fastest ruby implementation to date.
288,stringbeans25,1627962419.0,2.0,"Nothing like C#’s biggest framework! I do apologize for the sarcasm but I felt it needed to be said.

In all seriousness, what features does C# have that aren’t in Java?"
289,Muoniurn,1628196461.0,0.0,"How do these encourage bugs?! Dafuq? I mean, C does, and c++ is not memory safe - but your take is just uninformed bullshit."
290,Expensive-Way-748,1627986619.0,25.0,">uses packages without type annotations.

It's almost like dynamic typing was a mistake all along."
291,exotic-brick-492,1627965513.0,12.0,"pyenv with pyenv-virtualenv has been great. I've been using it for a little over an year now, and have not found a reason to switch to anything else. Give it a shot."
292,Poppenboom,1628387634.0,1.0,It's also horrendously slow compared to virtually all other common languages. Some of the benchmark test results out there are pretty embarrassing.
293,Riptide999,1627980532.0,5.0,"1. Why do you expect Python to be 100% backward compatible between major versions?
The reason for a major bump is to make breaking changes to make the language better than it was.
You either run the code in the language version it was written for or you rewrite the code to work with the current version.


2. Will not be a problem in the coming years since py2 was EOL in 2020 and new distros will come without py2. Running ""python"" outside a venv should always run py2 else the default has been changed in a breaking way, for example by installing ""python-is-python3"" which is considered bad practice.


3. Poetry does package management in a way that works really well including lock files and venvs.

Edit: formatting"
294,poincares_cook,1627969577.0,3.0,">Every computer I own has both versions installed. On some, running ""python"" runs v2. On others, v3.

use a virtual env for a project. Anyway you can easily set up what you want to run by typing ""python"" it's a problem solvable in 5 mins of using google.

>Package management sucks. Similar version problems with pip/pip3.

See above.

>Variables can be declared simply through assignment. If I see a=3, I don't know whether something is being mutated that is being used elsewhere.

1. use meaningful variable names.
2. How long exactly are your functions/classes that you forget what variables you have declared in scope?

>Most importantly: v3 is not backwards compatible! This is really unbelievable to me.

What are you doing that this is a significant issue for you?"
295,exotic-brick-492,1627965364.0,56.0,"\`5 + '5'\` is indeed a type error in Python, dear old man shaking his fist at the sky."
296,HugeProposal,1627973256.0,16.0,Python is strongly typed and that will give you a type error. A little knowledge is a dangerous thing?
297,EscoBeast,1627965398.0,10.0,"100% agree with you, but one thing Python generally does better than JS at least is that such expressions are at least usually runtime errors. So 5 + '5' (or vice versa) is not '55' in Python. But yes, compile time is still better than this. But one thing JS has over Python is that TS is better than MyPy."
298,,1627986866.0,-1.0,[deleted]
299,enderstenders,1627966754.0,22.0,"Personally, it's like having to move a pile of shit with an excavator.

Yeah, you don't get **real** type safety, but I'm a hell of a lot more productive with it, especially when I have to go back to old code."
300,dry_yer_eyes,1627968605.0,7.0,Thanks for my first hearty lol of the day. I’m definitely stealing that phrase for general usage.
301,spacejack2114,1627999897.0,1.0,"Which is actually a pretty nice language, aside from the lack of type safety. Which Typescript adds."
302,AlexHimself,1627955636.0,2.0,Can you elaborate?
303,lelanthran,1627948232.0,24.0,"> Static typing has both costs and benefits

The costs are negligible. They are also only applicable in the short-term but pay back handsomely in the long-term.

For example, there is a short-term cost for me to remain employed (commute, clothing, etc), but that cost is more than countered by my salary."
304,UrgentlyNeedsTherapy,1627945943.0,17.0,"What's the advantage of working with a language where the computer can't help you do jack shit, where every time you want to change a function signature you have to Ctrl+Shift+F to find every call site of that function so you can manually update them?"
305,agent8261,1628016518.0,2.0,"> Static typing has both costs and benefits.

You have to type more. That's it. It's such a insignificant cost. Yet static typing makes maintenance and debugging significantly easier."
306,Decker108,1627978418.0,3.0,"When wasm has matured that much, why not just, you know, write in a language with a sane design that isn't based on JS?"
307,TheIncorrigible1,1627951201.0,19.0,F# is a wonderful language.  It's sad Microsoft only half-embraced (side-hugged?) FP
308,anonveggy,1628045703.0,1.0,No but there's significantly less people building desktop apps with node.js or python thus being bumped down a notch for non web specific frameworks.
309,BubuX,1627962352.0,43.0,"With the creation of .NET Foundation, Rider IDE and Microsoft making most of the tooling/runtime open-source, C# is positioned to be even stronger than it is currently. Being able to run on Linux is great too.

Not to mention it has amazing performance for web servers."
310,_tskj_,1627945942.0,-105.0,"C# is a mediocre language but it is widely used. It's one of those things where once you have gotten used to a good language, using something like C# or Java feels like programming with one hand tied behind your back. Sure you get things done, but it takes ages and every second is filled with annoyance and longing for something better.

You would feel pretty bad having to write a web app in Matlab, but you could probably get it done. C# is equally as bad a tool for the job, we're just more used to it! Anyone reading this I encourage you to try out a good language sometime and you'll feel like you've been eating chocolate with the paper on your whole life."
311,Decker108,1627978289.0,1.0,"As a primarily Java dev who's been using C# in Unity3D for years, I have to say that it's definitely an okay language, but I wish the standard library was more extensive."
312,,1627944510.0,46.0,[deleted]
313,_tskj_,1627946215.0,-1.0,"In about five years C# will have every good F# feature from 2010! And everyone will call C# revolutionary.

For a knowledge industry we're pretty uneducated."
314,cheesesteak2018,1627948319.0,42.0,It’s also got way better documentation than a lot of other languages. MSDN is structured really nicely IMO
315,hypocrisyhunter,1627945854.0,18.0,Gotta be one of the best paid too.
316,Cyral,1627948294.0,19.0,ASP.Net Core (C#'s web framework) is #2 on the most loved web framework list and .NET Core is #1 on the other frameworks list. Hardly the most meh language. I suspect a lot of the hate for C# is from developers who used the old .NET half a decade ago and haven't since tried .NET Core
317,humoroushaxor,1627988818.0,17.0,"I don't trust anyone has used it much unless they have this opinion. It's feels like a  reaction to modern OO languages and they said fuck this we want something procedural so they resurrected ALGOL 68.

Its great for making CLIs or simple webserver stuff for the reasons you mentioned though. I would never do something big in it though."
318,Sadzeih,1628026241.0,5.0,"As a Go user myself, the std is what I find the most enjoyable about Go. What's missing in your opinion?"
319,Kinglink,1628026579.0,-2.0,"That's over all time.  *grasping at the straws*

Now with every question being marked as ""Duplicate"" or ""Already answered"" I wonder how that works with those numbers?"
320,FatFingerHelperBot,1628024996.0,0.0,"It seems that your comment contains 1 or more links that are hard to tap for mobile users. 
I will extend those so they're easier for our sausage fingers to click!


[Here is link number 1 - Previous text ""c#""](https://stackoverflow.com/questions/tagged/c%23)

[Here is link number 2 - Previous text ""c++""](https://stackoverflow.com/questions/tagged/c%2b%2b)

[Here is link number 3 - Previous text ""c""](https://stackoverflow.com/questions/tagged/c)



----
^Please ^PM ^[\/u\/eganwall](http://reddit.com/user/eganwall) ^with ^issues ^or ^feedback! ^| ^[Code](https://github.com/eganwall/FatFingerHelperBot) ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&subject=delete&message=delete%20h7lm29u)"
321,matthieum,1627986832.0,3.0,"Also, maintenance.

If the problem changes and I can't read your program, I'll have to throw it away and start from scratch..."
322,tachoknight,1627957387.0,4.0,"It probably will; I have no issues with folks having favorites. I dislike the idea that there's a popularity contest that suggests that X is better than Y because if itsv ranking on some poll. 

Ultimately, and I guess I didn't make this clear, is that the developer should not fear FOMO if the tools they're using doesn't rank highly on these polls; if they’re making people happy, getting the job done, it ultimately doesn’t matter what language they reach for."
323,tachoknight,1627952668.0,-2.0,"I'll give folks the benefit of the doubt that you absolutely can have favorites. I'm old enough I guess where, for so many jobs, I was required to program in a specific language and came to appreciate that there are lot of things to like, and dislike, about so many of them. That's why I always have a hard time with a question like 'What's you're favorite programming language' or 'What would you want to code in?'; I _don't_ have a favorite; I realized that whatever got the results fastest wins."
324,asmx85,1628025377.0,1.0,"No, it feels pretty much overrated. It makes wrong assumptions, oversimplifies and on top of it has a very nice case of [Anecdotal evidence](https://en.wikipedia.org/wiki/Anecdotal_evidence) with a big hint of [Survivorship bias](https://en.wikipedia.org/wiki/Survivorship_bias)"
325,TheIncorrigible1,1627951432.0,50.0,Having an unpopular opinion doesn't make either of you right.
326,watsreddit,1628016736.0,5.0,"I'd say so. The maintenance cost of even ""small"" changes is much higher without a type checker, and this problem is greatly exacerbated by large codebases with legacy code that very likely has large dependency graphs."
327,,1628033320.0,1.0,"Even if I accept that trending technology is a valid factor that should be considered for hiring devs (it isn't, fundamentals are what should matter), this survey is nothing close to being representative of what actual programmers like to use. It's full of vaguely defined parameters, bad statistics and doesn't consider any of the important factors (most important being the type of project they're working on) that leads to a programmer choosing their specific programming language or environment."
328,,1627984462.0,-24.0,"Why don't you consider taking your own advice? A survey based on completely made up parameters like ""loved"" and ""dreaded"" that aims to compare programming languages and editors so that programming enthusiasts on internet can have long flame wars don't deserve anything more. None of the comments here say anything new or interesting, same shit that's regurgitated on these kind of threads each year a survey like this comes out. The moderators should ban posts like this."
329,Frozen_Turtle,1627997739.0,9.0,If you're western hemisphere I can make an intro... we're still hiring like 3-4 senior devs per month... slide into my DMs xD
330,Frozen_Turtle,1628022330.0,2.0,Nay.
331,A1oso,1627991318.0,23.0,"The thing is that Dart is easy to learn. Programmers who know JS/Python can become productive with Dart in a few weeks. So companies don't need to hire devs with a lot of Dart expertise, they can just hire devs who are willing to learn something new."
332,x2040,1628162987.0,4.0,"Anecdotal: Dart is used by Flutter. Companies that use Flutter are trying to cut costs by developing 4 apps (Windows, Linux, Mac, iOS, Android) for the price of 1. Biased towards cost cutting orgs"
333,devraj7,1628002643.0,1.0,I just think Dart is even more nonexistent in the industry than Clojure is.
334,devraj7,1627986613.0,1.0,That's the wrong conclusion. There could be one Clojure job and just two Clojure developers in the world.
335,ragnese,1628003363.0,3.0,"Yeah, I don't know. Jane Street was exactly the kind of thing I was imagining.

I think my theory might still be viable, even in the face of FAANG. Just think about the *vast* number of JavaScript, C#, Java jobs that exist outside of FAANG. Yes, FAANG will inflate the averages for those languages, but they have a huge pool of jobs to drag that average back down, too. If there are only a very few Clojure shops and none of them of $40k/year in middle-of-nowhere-ville working on a school district's website, and there's just one or two ""Jane Streets"", I think it could still be the reason it's high.

I'm not going to argue hard for that, because I'm literally just making this up. But it's my guess for now. Otherwise, I see no reason that a Clojure dev should be paid much more than any other not-popular language."
336,squirtle_grool,1627969407.0,23.0,"Sources are based on experience. Companies I've run or have worked as an engineer or in management. It's all anecdotal and not scientific, so take it with a grain of salt of course. In that experience, I've mostly seen C# devs get treated like replaceable ""programmers"" who are there to do the bidding of management, rather than a crucial thinking arm of the organization. Again, all anecdotal experience.

The few Clojure shops I've seen treat devs like royalty."
337,doctork91,1628007036.0,3.0,"I've worked in a clojure shop and the emphasis was on finding the best engineers, not engineers with clojure experience. A few engineers knew clojure beforehand, but most learned it on the job."
338,squirtle_grool,1628001446.0,3.0,"If you have Clojure on your resume, especially as part of your duties at at least one job, you will get approached. In the US, several major companies actively hire Clojure developers. 

Some companies realize finding Clojure engineers is a difficult undertaking, and just hire good coders and teach them Clojure. Clojure is a tiny language and is easy to learn. Thinking functionally is a big change from typical OOP paradigms however, but learning to think functionally makes your OOP code better as well."
339,o--_-_--o,1627976207.0,1.0,"Hey needing to make an rsbms decision soon, and was just starting with postgres. Are there any good hosted versions of cockroach?"
340,lordcirth,1628002666.0,2.0,"Probably not? Might be worth benchmarking, though."
341,CartmansEvilTwin,1627966142.0,29.0,"If those are just spikes, couldn't some form of cache/buffer be enough?

Maybe Kafka with persistence and the queue workers than ""slowly"" do batch inserts."
342,figuresys,1627973759.0,26.0,"No no, sorry I definitely did not mean millions of writes to a single table or database, apologies for all the misunderstanding, I was describing the general server write orders, my point was mainly to say that we were able to work with the load (yes, with a Redis later too) and that was the biggest project I was in (a popular financial market with retail investors), so I asked the OP for their industry to get a better picture of what would make them want to switch to something like Cassandra.

As for your bottleneck, I wish I could help you, but this was all handled by a DBA team of 6 people, and I was a measly backend developer."
343,jds86930,1627955078.0,34.0,I call BS too. A regular PG db isn’t getting that kind of transaction rate on even a simple table structure. It’d need to be wrapped in some sharding software or doing some async buffering before inserting.
344,myringotomy,1628027403.0,2.0,Have you tried unlogged tables? If you are thinking redis they might be an option for you? They are the fastest way to ingest data into pg that I know of.
345,morkelpotet,1627953002.0,11.0,"This is the primary reason why I think Cassandra looks so promising. The complexity of the data I'm thinking of moving is pretty limited and writes are damn frequent, so scalability and resilience weighs a lot heavier than the ability to have foreign keys and joins.

I am a bit concerned about the performance of updates however. At what scale do they become problematic?"
346,liveoneggs,1627957036.0,2.0,"I was actually trying to make a pun on ""dread"" but, in reality, they are a total pain in the butt. (in the older versions of cassandra I used)  We were, effectively, rotating our entire data set every few days.

Cassandra's sweet spot is for append-heavy workloads with small amounts of delete and update.  I don't know if updates generate a tombstones or other inefficiency but I wouldn't be surprised if it forced more compactions, causing you similar headaches at scale."
347,Antrikshy,1628030027.0,3.0,Not even a framework but a runtime.
348,firefly431,1628006892.0,9.0,"C does have arrays, though. Sure, arrays decompose to pointers in many scenarios, but for example:

    int main() {
        char x[5];
        printf(""%d\n"", sizeof x); // 5
        char y[5][5];
        printf(""%d %d\n"", sizeof y, sizeof *y); // 25 5
        char (*z)[5] = y;
        printf(""%d %d\n"", sizeof z, sizeof *z); // 8 5 (assuming 64-bit)
        char **w;
        // w = y; // does not compile, because arrays aren't pointers
    }

Moreover, if you start thinking about the actual layout of things in memory, *clearly* C has arrays (though either you or the compiler can lay them out). What do you call things like `magic` below? 4 `uint8_t`s that happen to be laid out contiguously?

    struct header_t {
        uint8_t magic[4];
        uint32_t version;
        // ...
    }"
349,ragnese,1628002457.0,5.0,"Ooh! If you're a TS skeptic, then I have a sneaking suspicion that you'll *really* like Rust.

I have similar opinions to you, but I won't be politically correct: The JS ecosystem is buggy garbage. TypeScript's goal is to be very close to JavaScript to foster adoption. That's fine and it's totally valid to ""optimize"" for that, but it means the language still basically sucks and has a ton of stupid stuff, like bivariant class methods even if you turn on all of the strict type settings, as well as being able to pass too many arguments to a function, etc."
350,ragnese,1628040456.0,2.0,"Because Rust does not have a garbage collector, nor mandatory reference counting, it has a fairly novel concept called ""borrows"" when you take a reference to a piece of data (as opposed to a copy of that data). The borrow checker is basically a part of the type-checker. It won't compile code where a reference outlives the original data object it references, for example. In most popular languages that have garbage collectors, there's no problem with a reference outliving the data's original scope because the reference will ""keep the object alive"".

It's a very common point of frustration for people coming to Rust from garbage collected languages. But if you've written any C or C++, the borrow checker is likely your favorite part of the language, IMO."
351,swoleherb,1627992626.0,1.0,I've given rust a go and tried Rocket but to be honest I didn't get far. I do plan on revisiting it at some point.
352,humoroushaxor,1627992766.0,1.0,Sure but it's doesn't make much practical sense for someone writing containerized Node services to switch to Rust. That's all I'm saying.
353,Mexicancandi,1627997511.0,1.0,"Read the official rust book, it's free on the website FYI since you have a cpp background. It's great."
354,7sidedmarble,1627989739.0,9.0,"If you desire more complex scheduling then what built in crons give you, you can always run a pod just for scheduling and write as much complex stuff as you want in your desired system of choice inside the container."
355,crazy_hombre,1627999064.0,2.0,Swap support is being introduced as an alpha feature in the upcoming Kubernetes 1.22 release: https://github.com/kubernetes/enhancements/issues/2400
356,,1628009531.0,2.0,"My experience is that it is complex to *run* but dev experience is pretty great as long as you don't need something fancy, and that's probably why devs love it.

And yes, due to it supporting anything from your own bare metal to variety of cloud stuff complexity is massive"
357,BaNyaaNyaa,1628016029.0,1.0,"Without knowing that much about k8s, what I've heard is that it has a ton of options that are great when you need most of those options. It *does* make complex things simple.

The problem though is that because of all those options, it makes things that should be simple complex."
358,clearlight,1628115204.0,1.0,"what do you mean by scheduling? cron job type scheduled jobs? or scheduling of resources?

* cronjobs can be created with https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/
* pod scheduling has a range of options, https://kubernetes.io/docs/concepts/scheduling-eviction/kube-scheduler/ including custom scheduling if you really need it ( https://kubernetes.io/docs/tasks/extend-kubernetes/configure-multiple-schedulers/ )

FWIW, I've been using K8S for years in high traffic applications and never needed to customise the resource scheduler. We use cron jobs for other application level scheduled tasks, which IMO, are actually quite simple to add."
359,clearlight,1628115081.0,1.0,"Looking at real world examples is useful, otherwise by reading the documentation, e.g

* https://kubernetes.io/docs/tutorials/
* https://www.kubernetesbyexample.com/"
360,clearlight,1628114885.0,1.0,surely it's kubernetes fault and not your implementation /s
361,rainman_104,1627958931.0,28.0,"It solves a distribution problem and execution problem that's about it.

It creates more overhead for creating these but there's really no escaping this these days.   Whether you're writing a wheel or an rpm or a fat jar or you're making a docker image there will always be overhead anyway.

Docker kind of just guarantees distribution."
362,milkChoccyThunder,1627959512.0,14.0,"Agree with you. I was at a party with a bunch of developers and everyone was just going on and on about it enthusiastically - but none were actually using it lol.

There is some cool shit there though besides just orchestrating containers. You can also spin up/ run infrastructure off yaml and k8s will enforce the state you tell it to maintain. So someone goes into the gcloud/aws cli or changes something in the UI. K8s detects and actually rewinds the setting. Pretty awesome coming from an ex-ops team / config drift hater."
363,random_dent,1628013726.0,1.0,"Right now I hate it. I won't say it's because of anything fundamental to k8s itself, so much as the situation, which is we're not using it because it solves a problem we have. We're using it because the software we're using/supporting now is only supported on k8s so we have no choice and I've been thrown into it without any help or preparation.

A lot of people are saying the documentation is great, but I've found it to be terrible. I'm constantly finding it has no information on commands/options I'm trying to understand to make something work so I can't learn it from the documentation. I've learned more from stack overflow and trial and error.

My biggest peeve though is now there's another layer to troubleshoot, in addition to the servers, docker, the application itself, networking, dns, there's also k8s that can have issues, and aside from k8s this stupid application is built like microservices, but they're heavily interdependent, so if one doesn't start it can prevent several others from starting and you have to troubleshoot several pods to find which one is even having an issue, then it turns out it's a communication issue because flannel wasn't properly configured with the right IP range, and it only works on the one IP range, so why is it a setting in the first place?

If you have a better site than kubernetes.io/docs please tell me. Or if you have anything else for learning it that you'd recommend.

For my background:

I have a degree in CS, but have worked mostly in systems administration for 15+ years. I do EVERYTHING - from AWS (certified) and GCP, to bare metal server management, active directory, oracle and mysql dba (and db2 and postgres...), linux and windows admin, networking. I've run networking cable and I've launched high-availability ecommerce suites in aws. I do java release management for several projects, CI/CD with jenkins and write software mostly in python but also java, javascript and to a lesser extent C#. I administer O365 and Jira. Today I fixed a bug in ETL by creating a workaround in SQL.

With K8s we're using eks and gke, but I've also set up working standalone master/nodes on ec2/gce which isn't even supported.

Recently I had to learn CIS hardening. At least kube-bench is easy."
364,humoroushaxor,1627987698.0,6.0,"I totally agree. It's becoming a pet peeve of mine.

I see that attitude a lot with people whose infrastructure experience is mostly button clicking in the AWS console without much programming or automation experience."
365,ILoveOldFatHairyMen,1627985555.0,-2.0,"I don't think you've read the part where I said that I work with both native AWS tools and kubernetes, and kubernetes is infinitely more pain in the ass

> it sounds like you’re just impatient and don’t like to read the documentation, instead giving into the frustration at having to use a sophisticated system.

THE DOCUMENTATION FUCKING SUCKS AND DOESN'T EXPLAIN ANYTHING."
366,ragnese,1628040212.0,1.0,"> Having some more linting in your file because you're leveraging the typescript compiler (that's what's processing your JSDocs in your ide) is not a substitute to statical analysis of programs.
> 
> TypeScript is an expressive but weak and inaccurate static compiler, but it's still miles ahead of the insanity of using JS.

What you're saying here is that using a JSDoc-aware IDE is using the same TypeScript compiler. But you're also saying that using the TypeScript compiler is miles ahead of using JSDoc. So, using the TypeScript compiler is miles ahead of... using the TypeScript compiler?

TypeScript is NOT that impressive- I'm sorry. You said it yourself- it's a weak and inaccurate static checker. That's pretty much it. Yes- you can do some fancy type manipulations with it that you can't do with JSDoc. And, yeah, all things equal, I rather have TS than JS, but it's not that big of a gap. I rather have almost *anything* other than JS/TS and NPM."
367,MisterFor,1627982938.0,1.0,So to simply validate a form in a small web app you would use TS instead of JS?
368,chimpman252,1627989240.0,-1.0,"I just use JSDoc comments and the autocompletion is nearly the same

(downvoters, prove me wrong)"
369,p4y,1627976788.0,4.0,Turn off `noImplicitAny` then you can skip putting types on function parameters if you can't be bothered. With `any` you get the type safety of regular JavaScript. It's still better overall since lots of other places will get type information through inference
370,alteraccount,1627957855.0,7.0,"You can JSDoc your functions and even import from d.ts files. But if you're really gonna do all that, you might as well write it all in ts anyway."
371,ILikeChangingMyMind,1627955585.0,-2.0,"Like I said at the start, not all projects are the same.  Maybe you deal with microservices, but maybe Bob doesn't.

But regardless, pretending that you know what is right for every dev on the planet is ignorant and patronizing: the simple truth is that we live in a big world with many projects, and different projects have different needs.  **LOTS** of projects will do amazingly well without ever writing a single explicit type definition, and just using type inference."
372,fantastuc,1627958780.0,5.0,">VS Code itself is written in TypeScript

So I'm only allowed to write TS on it? I'm not sure I follow."
373,shogditontoast,1628023122.0,1.0,">We have people arguing Java and C# aren't 'strict' OOP

[https://userpage.fu-berlin.de/\~ram/pub/pub\_jf47ht81Ht/doc\_kay\_oop\_en](https://userpage.fu-berlin.de/~ram/pub/pub_jf47ht81Ht/doc_kay_oop_en)"
374,ILikeChangingMyMind,1627967700.0,1.0,"And?  VS Code's core is probably written in some C language: does that mean I shouldn't use it to write Javascript?

The whole point of type inference is that it's awesome precisely because it leverages the power of types.  You couldn't have all the cool features if your editor didn't understand that `x` was an `X`, and that means you need a type system like Type Script.   All that is great!

But *having to write explicit types in every project ever written* is not great!  Being able to not write those types in projects that *don't* need type documentation and strict type enforcement ... but still getting all the great IDE ""toys"" ... is not in any way a bad thing."
375,ILikeChangingMyMind,1628001114.0,1.0,"I've used TypeScript professionally on the job.  I've also coded in Java for years (another strongly typed language).

The *real* benefits of strong typing is not to save you the two seconds of time lost when you accidentally put a string into a function that expects an integer!  Those kinds of things take two seconds to fix.

The *real* benefits of strong typing are in the tooling.  For many, many years Java IDEs could do things JS IDEs simply couldn't, purely because JS IDEs couldn't understand types.  And I'm not talking minor things: I mean major, useful features that can save devs a lot of meaningful effort.

But again ... thanks to the incredible work of the VS Code team (which, as others have noted, *used* TypeScript), it is now possible to get 90% of the tooling benefits through type inference.  You *don't need* TypeScript to get the bulk of the tooling benefits."
376,AntiProtonBoy,1627958236.0,15.0,Chuckled at COBOL shoved into the bottom left.
377,lifeeraser,1627971361.0,1.0,"Oof, look at JavaScript. Though I'm surprised Python is so low--I suppose many people use it for trivial work, but don't do any serious programming with it."
378,jl2352,1627945900.0,132.0,"I think there is another aspect. I write Rust at home in some hobby projects. However I don't write it at work, and when I do, I always notice things missing.

Can I mutate this item I got from the store? Is it safe for that lambda to mutate external state? What if it's used across multiple threads, how will I know? Just the other day I had a 20 minute conversation with another developer over a 8 line block of code at work. The conversation was about adding a try / catch in a particular way, and we weren't sure which of those 8 lines would throw errors in different way.

Whilst that last example is present in other languages as well. I am pretty sure Rust is the only language outside of academia that solves all of them at the type level. You start to notice stuff like that, which makes me like it.

I'm sure if I used Rust every day at work I'd be writing a long angry rant about how awful compile times were, the confusing APIs, how you can waste whole afternoons on generics, and how basics like function overloading is missing (although can be faked)."
379,AustinYQM,1627947502.0,55.0,"From what I can tell the question for Love/Dread is this:  


>Which programming, scripting, and markup languages have you done extensive development work in over the past year, and which do you want to work in over the next year? (If you both worked with the language and want to continue to do so, please check both boxes in that row.)

So I imagine a language is loved if you selected ""I did work in it"" as well as ""I want to work in it next year"" whereas dreaded would be ""I did work in it"" without ""I want to work in it next year"" and wanted would be ""I want to work in it next year"" without having selected ""I did work in it""."
380,-Androth-,1627956478.0,-1.0,The results are highly suspet. I don't think there are that many rust developers.
381,sebamestre,1627953683.0,-1.0,I think stack overflow measures 'loved' based on impressions of people that claim to have used it.
382,_tskj_,1627945428.0,-7.0,You could easily filter the data based on use if you wanted though.
383,cauebs,1627945068.0,22.0,"Actually, I think it's more about how Rust is still growing in adoption, and most of the people using it today are people who chose it. That's still a merit to the language, I'm sure of it. It's just not a sign that it's the best language ever (this is proven by other factors! lol)."
384,Karma_Policer,1627942432.0,42.0,"Having the biggest fanbase is not a good metric of how well designed a language is. C++ is ubiquitous in systems programming, yet it surely is one of the most criticized in online forums. The same can be said for JavaScript and webdev.

Sometimes bad languages win simply because they are the status quo."
385,argh523,1627949906.0,11.0,"I think  you misunderstand the whole thing

> (If you both worked with the language and want to continue to do so, please check both boxes in that row.)

== most loved

One does not mean the other, but *both together* mean:

> people who are using rust right now want to continue using it

== most loved"
386,sievebrain,1627990998.0,16.0,">objectively superior to every other current mainstream language

That's a rather tall claim. It's pretty clearly not!"
387,hardolaf,1627977436.0,1.0,Rust still hasn't resolved performance issues relative to C or C++ when accessing certain hardware registers or memory spaces in an unsafe manner. They've been documented for over half a decade now.
388,swoleherb,1627988490.0,0.0,because the majority of people who voted for it don't use it.
389,TheTomato2,1628013375.0,1.0,You are literally proving my point.
390,wildjokers,1627998900.0,1.0,"I use a different one (just called Vim v1.21.5). It does look like they have a few different vi plugins. I will try one of the NeoVim ones. There are two of those though, guess I will try the one with most downloads. I just want '/' search to work correctly i.e. want to be able to navigate to next/previous match with 'n' and '?'.

I only use VSCode for my OpenSCAD stuff and to compile Marlin firmware for my 3d printers."
391,Dhghomon,1627963730.0,3.0,"Yeah, they are getting snapped up quite a lot recently. [Here's the most recent one I saw yesterday](https://twitter.com/yoshuawuyts/status/1422195636435357704) (Yosh, the guy that has the videos reviewing the changelog for each new Rust version)."
392,,1627960143.0,5.0,"I think well used is a massive overstatement. At all the companies I have worked at, if I mentioned ""we should do this in rust"", the first question would be ""what's rust?"""
393,renatoathaydes,1627974417.0,1.0,"> There people care A LOT about performance.

I tried Julia on a little problem I was looking at and it was much slower than Java/Rust/Lisp: https://docs.google.com/spreadsheets/d/14MFvpFaJ49XIA8K1coFLvsnIkpEQBbkOZbtTYujvatA/edit#gid=513972676

Do you have a very different experience?? The problem was pretty good for Julia as it required calculating a large number and then indexing on that."
394,Karma_Policer,1627944792.0,45.0,"Python was simply not designed with that purpose. Numpy may be one of the greatest numerical libraries ever written, but that is just not enough to make Python a pleasant language for numerical code. It's like modding a game to add a new character. The character will be there but it won't interact with the rest of game effortlessly.

The two-languages problem is also a big deal. If I need to write a low-level function in Julia, I can spend 30 minutes to make sure it will run as fast as a C implementation. I've done that and it works just as promised. It's revolutionary."
395,NedDasty,1627944563.0,32.0,"If you're coming from Matlab, Numpy is really clunky if you're dealing with matrices that have dimensionality >= 3.

In most cases it's fine though, but I wish Python allowed for a bit more syntax overloading--Numpy can get pretty verbose, with all the `np.newaxis` and `slice(None)` where Matlab often uses `:`.

On top of that, `Matplotlib` is really hard to follow. In every tutorial they say ""use the object-oriented approach"" but give terrible documentation on that approach; most of the tutorials provided examples and then say ""don't do it this way!"""
396,BosonCollider,1627949304.0,21.0,"Main reason: Python is extremely verbose for simple things compared to dedicated math languages.

Other than syntax, Python's abstractions are good for things like scripting a web server, but in math, ""subclass Floats if you want to extend the factorial function to work on them""  just sounds like a bad joke. For math, extensible function & operator overloads are the main abstraction you want, and Python does not provide it as a first class feature for already-defined classes. Doesn't matter if its function overloading like C++, multimethods like Julia, or Typeclasses like Haskell or Rust's traits, you need ad-hoc polymorphism that doesn't run into the expression problem.

Also, the fact that Python is slow enough that it has to rely on libraries written in C for any heavy lifting, means that performance optimization tends to turn into ""how do I leverage library functions most efficiently for speed"", which often leads to fast code being outright unreadable. In general, if you want to make Python fast, you have to give up what makes Python Python."
397,User092347,1627985234.0,1.0,Being able to write loops without being worried about performance is very freeing.
398,metaden,1627973177.0,2.0,"It makes it easy to create backend services with high concurrency, and it has several tools till VM level for distributed applications compared to JVM. Also one other factor, big companies like Spotify, Pepsi started to use it and realise it’s value for backend. People who use it have seen some demons in their distributed system and elixir provides very robust tools in that area."
399,metaden,1627983314.0,1.0,"I checked them all. Most of them are very academic, there was one lightning talk about Kubernetes deployment, that is all"
400,Kirk_Kerman,1627958567.0,-4.0,Then they really gotta update the Rust book to say that smh my head
401,ObscureCulturalMeme,1627964188.0,8.0,"That's the bulk of it, yes, but not every large org will be okay with installing the JDK without some kind of paid support in place.  Lots of ways to get that, of course, but not from the same site."
402,Muoniurn,1628195407.0,1.0,"OpenJDK *is* the reference implementation made by Oracle. But it is completely open-source and and free and you get free unlimited support when using the latest version (as with every open source program ever), with optional paid support for older versions."
403,Kirk_Kerman,1627951764.0,21.0,"Same. No serious problems with Java besides the general verbosity of clunkiness it has, but Oracle seem to, as a software company, mostly produce enterprise-grade litigation."
404,sievebrain,1627991164.0,3.0,"But that doesn't really make sense. You don't have to interact with Oracle to use Java. I never have. Their supposedly scary license terms are just normal open source licenses, unless you *want* to buy support from them, but how many PL runtimes have large scale corporate support beyond Java and .NET? Most of them have no support at all, so Oracle is only additive in that regard."
405,Muoniurn,1628195249.0,1.0,"Please do inform yourself on the actual situation and don’t believe random lies on the internet. OpenJDK has been completely open-sourced, it has multiple vendors supporting it so even if hypothetically Oracle would do something, plenty of company could replace it, and it has the same license as the Linux kernel. And to be honest, Oracle is not a bad steward of the language, it has been going very strong nowadays."
406,falconzord,1627970122.0,20.0,Ironic that Java was supposed to be this open savior platform but C# ended up an ISO and Ecma standard
407,ObscureCulturalMeme,1627964995.0,1.0,"> just under 7 and a half years ago.

Fixed, thanks!

> And according to https://www.oracle.com/java/technologies/java-se-support-roadmap.html, Java 8 is still eligible for both premier and extended support.

Existing support customers can pay more for that, but as of 2019 it's apparently no longer possible to buy basic support for 8 from scratch.  They really want you to move on or pay a LOT."
408,ObscureCulturalMeme,1628008800.0,2.0,"> there is no requirement to ever sign any contract with Oracle.

If you want commercial support from Oracle there is, and that's the point."
409,ObscureCulturalMeme,1628197254.0,1.0,"> if you or your company wants to use it it can pay for that of course.

That's the point.  The rest of your unhinged rant is misdirected and has nothing to do with my post.  If you're just going to be pointlessly abusive because you've misunderstood the topic, that's not my problem.  Onto the blocked users list you go."
410,ILikeChangingMyMind,1627948471.0,-9.0,"I mean, it's all relative.  I haven't followed Java lately, but even just lambdas were an improvement (in the boilerplate sense).

But still, *any* language where you have to write:

    class Foo {
        void Bar() {
            system.out.println('Hello');
         }
    }

Will always feel heavier to me than (Javascript version):

    const bar = () => console.log('Hello');

In other words, there's an inherent boilerplate ""weight"" to just using the OOP paradigm, which Java (as an OOP from-the-ground-up language) will never escape."
411,LicensedProfessional,1627949060.0,13.0,That's what MyPy is for. I really started enjoying Python more when I incorporated MyPy and PyLint into my workflow—it feels like I have some guardrails now
412,ILikeChangingMyMind,1627954363.0,9.0,"If your ""typing system"" is writing a bunch of unit tests ... I pity you."
413,humoroushaxor,1627989297.0,2.0,Or constantly looking up method signatures on the web.
414,LAC-Tech,1627952674.0,7.0,"> I'm not really a Java fan, but I have to say that that's an unfair comparison - the Python/Javascript solution will need to have unit tests simply for ensuring that the correct types are passed in.

That's not what unit tests are for! I mean a well tested code dynamic codebase will catch a lot of type errors as a side effect, but you don't write them to become some kind of ad-hoc typechecker.

If you want to go down that road for dynamically typed languages, look into design by contract."
415,ragnese,1627999154.0,2.0,"> I'm not really a Java fan, but I have to say that that's an unfair comparison - the Python/Javascript solution will need to have unit tests simply for ensuring that the correct types are passed in.

Here's the thing, though. Java's type system doesn't actually help you that much here. Once you introduce generics or intentional nullability (like a database column), you're basically fucked- you **will** have type bugs happen at runtime.

Java is **exactly** the reason that Python and JavaScript took off (outside of the browser, in JS's case). People in the 00's basically got sick of Java's shit and collectively decided that static typing was bad. Then we had to deal with dynamic typing until, thankfully, languages like Go, Rust, Swift, and others came on the scene.

Java almost killed statically typed languages, IMO. I think Java **did** kill OOP. Because everyone thinks of Java's stupid class inheritance mechanisms and bad-type-system-induced ""patterns"" when they hear ""OOP"". Which is a shame, because real OOP didn't have to die."
416,combatopera,1627977687.0,-2.0,">simply for ensuring that the correct types are passed in

you need to let go. stakeholders don't care about this

edit: downvoting this, much like your obsession with types, is a waste of everyone's time"
417,ILikeChangingMyMind,1627947770.0,2.0,"Sadly, the reason we went with JRuby (as opposed to Jython) was that Jython was not ready for production back when we made the decision.

However, that was over a decade ago, and I believe Jython has advanced dramatically since.  I haven't followed the project, but I imagine it'd be great for you."
418,rlp,1627976727.0,1.0,"Graalpython is slowly taking shape, although it's still very alpha: https://github.com/oracle/graalpython"
419,ILikeChangingMyMind,1628197687.0,1.0,"I have not.  I don't mean to badmouth Ruby but ... it's not the language for me (I'm much closer to Python and Javascript than Perl, which Ruby inherits a lot from both literally and philosophically).

However, despite not being the biggest fan, I'll be the first to admit our team got more done using JRuby (myself included) than working with Java directly."
420,GreenToad1,1628001331.0,3.0,"Oh there are a lot. Expression trees make linq do magic, properties make debugging way easier, generics over primitive types are cool, nullable types are cool, string interpolation is cool, async/await is disgusting but it is there. This just from top of my head, there are some tiny ones like nameof, that are nice and some bigger ones that don't actually make a big difference in coding but definitely a lot of cool stuff. Im now doing c# after 10+ years of java and am very frustrated that c# enums are ""dumber"" than java and can only imagine how someone moving from c# to java would be driven mad by lack of some many useful things they had in c#. 

Oh and entity framework core is just magic, nothing in java comes even close.

That all saddens me because i like java very much but can't pretend that as a language c# takes the prize. Hopefully loom and valhalla will bridge some of the gaps but even after those c# is still in the lead."
421,ragnese,1628244103.0,1.0,I could write long-winded essays on how any of the languages I listed are poorly designed and encourage bugs. But I have no intention of doing that for Reddit comments. Is there a particular language above that you'd like me to give a short example of how it encourages us to write bugs?
422,ProfessorPhi,1627993276.0,3.0,Its strong dynamic typing btw. I'd say anything can seem like a mistake in the wrong context. I've worked on giant python projects that were a dream and I've worked in small cpp projects that sucked too.
423,hardolaf,1627976848.0,0.0,"Okay, but how do I keep this in sync with my production environment that may or may not have updated?"
424,PancAshAsh,1627997916.0,2.0,">2. Will not be a problem in the coming years since py2 was EOL in 2020 and new distros will come without py2.

*Laughs in decades of legacy projects.*"
425,Alikont,1628003055.0,2.0,"> Why do you expect Python to be 100% backward compatible between major versions?

I can't name any language that did a breaking change like that.

Most of other languages at least allow you to mix different files or packages with different language versions.

C#/Java compiles to bytecode that didn't change since first versions, I can use C#3 library in C#9 project.

For C++ you can specify language version per cpp file and have macros to allow you to make multiversion headers.

Even JS->TS ecosystem transition is smoother than Pyton 2->3."
426,squirtle_grool,1628000851.0,1.0,"The language changing is such drastic ways is not that common, and in languages that do change in such ways, you can often add a version tag to the code that will compile/interpret your code with that version in mind.

They chose to release 3 while so much v2 code was still out there, without any automatically supported mechanism for running the code. It was a dick move.

What's interesting is that if you try to run v2 code with v3, it will literally tell you in some instances how you need to change the code to make it work. But it doesn't even offer to do it for you. Similar gripe: If you're in the repl and type exit, it will tell you to add little parentheses if you want it to exit. I had never seen a repl pout before! It's like it's crossing its arms with a pouty face and refusing to let you do what it knows you want to do.

Again, I still use python and it's a fine language with many great features. These things aren't deal breakers for me. But they do really annoy me."
427,squirtle_grool,1627977867.0,8.0,"You are absolutely right that all these problems are solvable / can be worked around.

In many other languages, it's not even a concern to begin with, which is why I listed these as my gripes with Python.

The language version breakage issues typically affect me when I use other people's code."
428,lifeeraser,1627971652.0,11.0,Package management still sucks. I'd argue that NPM is far better than pip.
429,poincares_cook,1627969175.0,5.0,I guess that's the *type* of people that dread python...
430,lordcirth,1627995980.0,1.0,"Apparently so! It's '55' in Jinja, but apparently not in Python."
431,moomoomoo309,1627995608.0,1.0,"No, in those languages, it'd be '0'. If it was a string and not a char, then it'd append."
432,i8beef,1628000152.0,7.0,The only thing nice about JavaScript is it isn't PHP.
433,Cosmic-Warper,1627956025.0,29.0,"Typescript is javascript with static type enforcement. Really helps with documenting, debugging, and validating code"
434,ILikeChangingMyMind,1627948675.0,-12.0,"What could you possibly even be basing that statement on?  Have you conducted some kind of measurement of TS vs. JS programmers?

Meanwhile, your analogy actually supports my argument.  If you could get clothes and commute and all that for free, you would, right?  Talking about how much time you save by getting an Uber doesn't matter if you can save the same time for free by getting a ride from a friend.  That's what type inference (a VS Code feature) gives you: 90% of the benefits of typing, for 0% of the cost.

(Ok, technically it's 0.0000001% of the cost, as you *do* have to add a line to `jsconfig.js`.)"
435,ILikeChangingMyMind,1627946373.0,-14.0,">What's the advantage of working with a language 

You don't have to waste a ton of time writing types? And as for the rest, you couldn't be more wrong.

With VS Code type inference you can get 90% of the benefits of Typescript without writing a single type.  Maybe instead of downvoting strangers out of ignorance, you should educate yourself on what's possible in tech today?  

See: https://code.visualstudio.com/docs/nodejs/working-with-javascript#_type-checking-javascript ... you get *variable* renaming (*not* find/replace), `CTRL + click` on variables to go to their definition, autocomplete suggestions for function arguments ... all the things you probably incorrectly think of as requiring TypeScript."
436,,1627946378.0,-12.0,js does not have the overhead ts does have. I have seen people force code into being more complex to allow types to match. sometimes ts warnings / errors are false positive and you need to add more code to let compiler know that what you are doing is okay. Is not as simple as you make it sound
437,binarycow,1627959405.0,-1.0,"> where every time you want to change a function signature you have to Ctrl+Shift+F to find every call site of that function so you can manually update them?

Just change it in one spot, then click the little lightbulb, and tell your IDE to fix it for you."
438,ILikeChangingMyMind,1628016715.0,1.0,"Like I keep saying, you're making tons of assumptions that simply aren't true about every project on the planet.  YES, TS IS GOOD FOR **SOME** PROJECTS.

It is not however universally superior to JS!  Both languages have upsides and downsides, and yes having to explicitly type everything *is* a downside.  There's a reason *dynamically typed* languages like JS, Python, Ruby, etc. have all been incredibly successful, and have taken huge chunks of market share from *statically typed* languages like Java.

If strong typing was the godsend for every project, Python and Ruby would not exist!"
439,pheonixblade9,1627974728.0,4.0,it's nice to have a non-strict FP language.
440,,1627946413.0,43.0,What is a “good” language to you?
441,Quoggle,1627946414.0,8.0,What would you consider to be a good language and why do you think it is better than C#?
442,TirrKatz,1627946540.0,20.0,">It's one of those things where once you have gotten used to a good language, using something like C# or Java feels like programming with one hand tied behind your back

Until you start comparing frameworks and ecosystem, and not only language by itself. With that in mind C#.NET is still a great option for the Web. Similarly, as great Java is, but later one has darker future (not that dark at all, if we consider other JVM languages though).

Or you probably want to mention F# as a ""good language"" example, that work with same ecosystem and frameworks, but its support by MS and community is always weaker objectively (C# became #1 priority language in .NET and everybody just agreed on this)."
443,AustinYQM,1627948228.0,3.0,You haven't said what you think is a good language that does what C# or Java does.
444,BobSacamano47,1627949528.0,1.0,Are you thinking about C?
445,_zenith,1627994052.0,5.0,Wait what? The .NET stdlib is huge. What exactly are you missing?
446,svick,1627997657.0,1.0,Isn't a big part of the problem that Unity doesn't support NuGet well?
447,Chesterlespaul,1627948072.0,0.0,F##
448,r0ck0,1627969476.0,3.0,To be fair there's quite a few things to possibly know in this industry.
449,pheonixblade9,1627974706.0,1.0,"so, kinda like how Java relates to C#? lol"
450,_BreakingGood_,1627955524.0,17.0,"I remember back in college I was looking at this obscure Windows driver programming documentation on MSDN. Somebody had left a comment noting an inaccuracy and one of the MS maintainers responded to it and made a fix within a few days. Very impressed, honestly. That particular piece of documentation probably gets 1 page click every other month."
451,csmalley89,1627951865.0,22.0,"100% agree! Half the time I’m googling how to do something, I end up coming back to MSDN after wasting my time looking through countless outdated stackoverflow pages. Normally Microsoft docs have answers way closer to what I’m trying to accomplish too."
452,anonveggy,1628045851.0,2.0,Docs.microsoft.com really shines that's for damn sure. It's also open source and made usable for third parties
453,Frozen_Turtle,1627961122.0,10.0,"Nooooot really...

https://insights.stackoverflow.com/survey/2021#top-paying-technologies

There are 22 better paying languages"
454,nullmove,1627950262.0,-14.0,"One is a language and other is a ready made framework coded up by someone else, they can be amazing/bad independent of each other. I suspect you don't see language and ecosystem as distinct, but language design can be judged on its own. I am not trying to trigger PHP users, I think it has amazingly productive frameworks, but there is a parallel to be drawn here."
455,,1628029450.0,2.0,"The big few is I find myself wanting a bulit-in set, stack and queue. I feel like the standard library has tons and tons of protocol specific stuff but doesn't give me low level tools."
456,UltraPoci,1627973907.0,5.0,"I don't think anyone uses this poll to determine what is the best language ever, honestly. It's just a way to understand what people like these days, and to discover languages one may not know beforehand. The goal is to solve the problem, but the tools used to solve that problem are important. If this wasn't tha case, we would still be using assembly."
457,jrhoffa,1627951988.0,-41.0,"Awfully *crabby,* aren't we?"
458,igouy,1628034301.0,2.0,"Something you know or something you assume?

*""A very large Smalltalk application was developed at Cargill to support the operation of grain elevators and the associated commodity trading activities. The Smalltalk client application has 385 windows and over 5,000 classes. About 2,000 classes in this application interacted with an early (circa 1993) data access framework. The framework dynamically performed a mapping of object attributes to data table columns.*

*Analysis showed that although dynamic look up consumed 40% of the client execution time, it was unnecessary.*

*A new data layer interface was developed that required the business class to provide the object attribute to column mapping in an explicitly coded method. Testing showed that this interface was orders of magnitude faster. The issue was how to change the 2,100 business class users of the data layer.*

*A large application under development cannot freeze code while a transformation of an interface is constructed and tested. We had to construct and test the transformations in a parallel branch of the code repository from the main development stream. When the transformation was fully tested, then it was applied to the main code stream in a single operation.*

*Less than 35 bugs were found in the 17,100 changes. All of the bugs were quickly resolved in a three-week period.*

*If the changes were done manually we estimate that it would have taken 8,500 hours, compared with 235 hours to develop the transformation rules.*

*The task was completed in 3% of the expected time by using Rewrite Rules. This is an improvement by a factor of 36.""*

[Transformation of an application data layer, OOPSLA 2002](http://portal.acm.org/citation.cfm?id=604258)"
459,WaywardTraveller,1627993808.0,9.0,"Read something like this in another thread this morning:  

Person is working in a grocery store on a holiday. Lady comes in and says 'Why are you guys even open, it's a holiday, you shouldn't be working'. 

Well maybe if you didn't come _shopping_ on a holiday, _I wouldn't have to work_.

I know it's not a direct parallel, but I think you should be able to see how you are indeed part of the very problem you are ranting about."
460,gutigen,1627987580.0,16.0,"The survey is about trends among developers, not which language is the best. 

In grand scheme of things, the only thing that matters is trends. It's basically why everyone wants k8s now, even though 95% companies (made up percentage, deal with it) doesn't need it."
461,crab-rabbit,1627986975.0,17.0,"you're not exactly wrong, but you're indeed obnoxious. just ignore the post and move on if it gets your panties in such a wad"
462,notoriouslyfastsloth,1628014918.0,1.0,u payin 300k?
463,Living-Shame5679,1628027529.0,1.0,Mind of I slide in as well?
464,rpd9803,1628029949.0,1.0,"If you think you can boil down the behavior of a labor market with a single axiom and a single imaginary example, I’m not sure what to tell you other than I don’t think your have modeled enough of this domain."
465,Frozen_Turtle,1628003998.0,3.0,"Yeah, kinda wish SO's dataset was public so we could see/calculate the standard deviation. Oh well. The invisible hand works in mysterious ways."
466,emannnhue,1627987582.0,7.0,"This is my experience as well. I think that if you are able to use fringe technology and you end up working in it, companies really treat you right because it's just business. You're not going to find a replacement with experience so easily. There are few jobs, and because there are few jobs there are few people with experience, don't need math or science to explain that one. So because there are few people with experience replacing someone you already have who not only has experience but also domain specific knowledge of your business problem becomes a total bitch to do, and usually it's just worth paying that person more or making them happy rather than trying to replace them."
467,notoriouslyfastsloth,1627996227.0,3.0,i work with C# and get treated great...and i prefer clojure over C# by  a million miles...i also make more doing C# than any clojure job i could find... so dunno
468,devraj7,1627969762.0,1.0,It probably has more to do with the size of the team/org/company than the technology used.
469,Dokiace,1628004767.0,3.0,"I see. That's definitely tempting. I'm trying to do functional now with filter, map, and reduce. And because I use Java mainly, I'd probably learn Scala in the near future and hopefully Clojure after. I really enjoy doing functional style programing in Java, and can't imagine how it will be easier in Scala. But Clojure syntax really scares me though because of how abstract it seems at a glance."
470,squirtle_grool,1627977918.0,2.0,Cockroach themselves I believe are working on a fully elastic hosted version. I'm looking forward to trying it out.
471,morkelpotet,1627975205.0,5.0,I will definitely take a closer look at Kafka!
472,NotUniqueOrSpecial,1627955443.0,17.0,"Yeah, there's definitely some missing information here. Even using the bulk `COPY` stuff, I've never seen anybody report numbers bigger than tens of thousands of records per second."
473,figuresys,1627973888.0,1.0,Thanks for the answer! I appreciate it.
474,AjanPerry,1627976099.0,1.0,It’s same all the time.
475,Nyefan,1627971680.0,1.0,"I haven't worked with Cassandra since 2017, but back then updates didn't create tombstones.  However, they did create compaction load and slow down reads until that row got compacted."
476,Decker108,1627976993.0,1.0,"> Cassandra's sweet spot is for append-heavy workloads with small amounts of delete and update.

So basically: pray that you get the data model right on the first try and won't have to migrate or delete any data later?"
477,captain_obvious_here,1628003039.0,2.0,"Note: I don't want to start a languages war.

> The JS ecosystem is buggy garbage.

Well...we initially had PHP code (tens of millions of lines of it) and dozens of custom PHP modules. So Node was quite an improvement to our coding and maintaining experience. But yeah...JS.

Reading [the book](https://doc.rust-lang.org/book/) right now :)"
478,MDSExpro,1627992408.0,1.0,"Which results in unnecessary complexity, as end result is scheduler running under supervision of another scheduler, thus proving my point."
479,shitty-photoshopper,1627968936.0,10.0,"When you consider the overhead of running the wheel or rpm, configuring all of the stuff to be equivalent to kubernetes it's the same or better, but kubernetes is easier to deal with since it's centralized and all in code"
480,Zanderax,1627983871.0,1.0,Its not really a tool that you use as a programmer. Its more of a ops tool. The most developers do is write helm charts and dockerfiles.
481,Sadzeih,1628021602.0,2.0,"I heavily use `kubectl explain` which just gives you the documentation of the provided resource. It's amazing to look up the specs of a resource. For example, if you want to quickly get the spec for the `volumeClaimTemplates` of a `StatefulSet`, you can do:

```
kubectl explain statefulset.spec.volumeClaimTemplates
```

It's like the best command of `kubectl`.

Edit: IMO, k8s is best used on GKE. EKS is pretty good also, but GKE still is the best. Its just to easy to deploy a cluster (with or without using something like terraform). If you don't want to handle observability by yourself, GCP handles the monitoring for you via Stackdriver (well previously Stackdriver now it's just Monitoring). I still prefer prometheus/loki/grafana but GCP Monitoring works."
482,random_dent,1628011337.0,2.0,"This so much.

I've had so many cases of reading through the k8s documentation for a command and it doesn't include any explanation for how to properly use a command or option, or explain the difference between options. It'll list a command, but not explain what it does or how to properly use it so I'm back to trial and error to figure it out because it just isn't documented.

The documentation is terrible.

AWS documentation is fucking miraculous. Every use case, example code, anything you could want. I have yet to find anything in AWS that isn't well documented.

Every detail of CLI commands is laid out, and scripting it for complex cases is very easy in comparison."
483,TheIncorrigible1,1627991003.0,9.0,Yes.
484,dvtkrlbs,1627972516.0,5.0,At this point why not just write typescript
485,Aeolun,1627964449.0,7.0,">	LOTS of projects will do amazingly well ~~without ever~~ despite never writing a single explicit type definition

I think the implication here is a bit different. Yes, it’s possible to write good code without explicit types. It’s just needlessly painful."
486,MisterFor,1627982832.0,0.0,Like any Python or PHP project basically
487,delta_p_delta_x,1627961053.0,5.0,"> So I'm only allowed to write TS on it? I'm not sure I follow.

Not at all. My point was that it was ironic that the parent commenter was flaunting VS Code's 'amazing type inference capabilities' for JavaScript, when the editor itself was written in a language (ie TypeScript) that obviated the need for said complicated type inference capabilities, because the language itself has typing built-in."
488,daftmaple,1627968512.0,3.0,"No, I'm not saying that you can't write pure JS just because your intellisense is pretty much TS. You were saying that VS Code's inference while at the same time saying that TS is not needed. Maybe you should try coding in a different editor that doesn't have TS intellisense and you'll get how ironic your statement was. You are practically attached to TypeScript.

Don't get me wrong. I still think JS-only project is possible & will still exist, but I wouldn't do it over a 100 LOC project. It's a preference anyway. I'm just not a masochist and have better things to do :)"
489,r0ck0,1628003201.0,2.0,"> I've used TypeScript professionally on the job.

Yet still obviously don't know much about it.  I can even tell from that phrasing that your experience with it is pretty limited.

> it is now possible to get 90% of the tooling benefits through type inference

The fact that you think it's just about typing confirms even more.  

And seems you only have a fairly surface level understanding of typing systems if you think interference of plain JS code could come anywhere near what TS can do."
490,Decker108,1627977793.0,6.0,"Exactly this, I'd say. I avoid Python for large or complex problems, but prefer it for small scripts or tools."
491,uprislng,1628009168.0,2.0,"I'd say 70% ""loved"" is probably the real world maximum. For any subject measurement out there with a large sample size you can probably find a floor of around 30% of people that _don't_ love it."
492,Zyansheep,1627971936.0,1.0,Or there being no fields in traits...
493,silveryRain,1627981780.0,1.0,Are confusing APIs a big issue with Rust?
494,GabiNaali,1627951781.0,15.0,"So it's not exactly most loved or dreaded, but actually what people want to work with, for example if I've done extensive work with python and want to work with javascript next year, it doesn't mean that I dread python or that I love javascript, it just shows what I want to work with.

The Love or Dread names seem a little misleading."
495,,1627945744.0,11.0,I must be missing access to that information because I didn't see anywhere where I could easily filter the data to show me individually who uses rust and voted on if they loved or hated it. Where do I find that?
496,BrazilianTerror,1627953535.0,21.0,"They are most criticized because they’re ubiquitous. Since everyone has to use it, everyone will find some flaw and criticize. You can’t critique something you don’t use, cause you wouldn’t notice the flaw in the first place."
497,lelanthran,1627971229.0,3.0,"You are correct, of course. I did misunderstand. My apologies."
498,sqlphilosopher,1627997753.0,1.0,"This is very interesting, could you point to some material to read more about it? Ty"
499,spudmix,1627992905.0,8.0,"The ""loved"" category only includes devs who answered that they _do_ actively use the language and wanted to continue doing so. 

Unless you're claiming that the respondents are lying, you should stop stating things with such misplaced confidence."
500,TheRealMasonMac,1627961674.0,4.0,"Like I said, it's just not at the scale of other languages just yet. At tech-based companies however, it's a lot more common than you might think, even FAANG excluded."
501,UltraPoci,1627975902.0,1.0,"I haven't had a chance to use Julia in a big project yet, and I'm not really an expert programmer, but that's weird. There are a couple of things I can tell you:

1. I don't know what you used to calculate times, but avoid the \\@time macro for precise benchmarks
2. The first time you call a function in Julia is always slower due to JIT I believe

Having said that, you can try the julia lang forum or r/julia and ask there, I'm sure people can help you find out what doesn't work :)"
502,User38374,1627984587.0,1.0,"> Do you have a very different experience?

Yes, in most cases you can achieve near optimal performance with Julia (since it's a compiled language). Maybe you hit one of these rare cases (seems you are using BigInts) where there's some problem with the compiler or library, but usually it's rather some mistakes in the code that make it slow. Maybe try posting on discourse, people there like to optimize things."
503,spudmix,1627945518.0,30.0,"Of all the pieces of software that I use regularly, matplotlib is by far the least intuitive. I love what it can do but I hate what I have to do to make it do so."
504,JanneJM,1627949326.0,6.0,Plotting is hard. Matplotlib is a beast - but when you really need to control the plot precisely or you want to do something out of the ordinary I haven't found anything else that's nearly as good.
505,klorophane,1627962319.0,17.0,"I don't know if you're serious or not, but it is quite literally in the book. Page 504.   


Edit: Appendix B, Table B-7 for those reading online :)"
506,I_NEED_APP_IDEAS,1627959508.0,7.0,">smh my head

Smh stands for shake my head. You basically just said shake my head my head.

What a dummy. Smh my head."
507,Yoshanuikabundi,1627961519.0,-6.0,"Yeah, I think that's a conscious decision by the author trying to provide the one best way to do things. You could open a PR if you wanted I guess."
508,stringbeans25,1627964280.0,1.0,It’s an unfortunate realization. I feel like I’ve found a nice place right now at my current org where we’re large enough to have a lot of enterprise benefits but we still seem to be pushing the envelope on using the latest tech.
509,emannnhue,1627991497.0,1.0,"It makes fairly complete sense to me when I consider the fact that I'm not the person interacting with them, my company at the time would have been and other companies in the region. None really wanted to move on from 1.8, so I stopped using Java. My objective was to maintain active career development and sticking around on the same version of Java forever wasn't doing that for me."
510,emannnhue,1628195416.0,2.0,"Oracle has a history of suing anything they believe they can get money out of, in particular Google for the API suit. I used to work as a Java engineer. I mean, you're literally questioning my own personal experience and reasoning for swapping away and saying it's a lie on the internet and you open that up with ""do inform yourself""? Do grow up, that's no way to address anyone"
511,Muoniurn,1628195307.0,2.0,"You do realize java is one of the few languages that actually have multiple independent implementations and has multiple completely open source ones, including the reference one?"
512,Muoniurn,1628195505.0,0.0,"How the fk do you want to pay oracle without an oracle contract??!
But there is no reason to pay oracle, red hat, ibm, and plenty of other companies provide paid support for plenty of java versions… stop the fearmongering.."
513,SeesawCompetitive597,1627952047.0,11.0,"lambdas let you do those one liners

modern java is catching up with a lot of cool shit too (records, pattern matching, sealed classes, etc) to reduce all the annoying verbosity
ya I know that's just Kotlin but still"
514,Runamok81,1627951862.0,16.0,"C# [top-level statements](https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9#top-level-statements) has entered the chat

    System.Console.WriteLine(""Hello"");"
515,agent8261,1628015442.0,2.0,"Your two examples feel like something people who don't build and maintain (this is important) think is a big deal, but more experienced devs ignore. Yeah the second one is shorter, but the first one is a lot easier to change and expand.

I personally find lot of ""shorter code"" just makes the language more complex and magical. For example, removing the ""{}"" Yeah you saved a few key strokes, but now the scope isn't as clear."
516,Muoniurn,1628196051.0,0.0,When do you ever start a project that only ever does one thing?
517,mrbuttsavage,1627960309.0,3.0,"mypy is great with some warts. More than once you'll get to a ""why didn't mypy catch this?"" in your tests that turns out because the library you're using like boto doesn't have stubs or they suck."
518,lelanthran,1627980124.0,4.0,"> If your ""typing system"" is writing a bunch of unit tests ... I pity you.

No, **my** ""typing system"" is ""type-errors are caught before the program is even run"". There's a level of confidence there about a specific and common class of errors.

The *dynamic typing* system is pitiful, as you can only find type errors after running the code. There's no confidence in that system until you actually run the code with a bunch of incorrect types in places."
519,Muoniurn,1628195994.0,1.0,"Whaat? Generics *are* type safe. Erasure is the default way of basically every typed language (other than C#), eg. haskell erases every fucking type and you will not get type errors at run time. It is the same way with Java as well. Unless you write List instead of List<Something>, it will never fail at runtime (other than perhaps modifying some shit with reflection) because it is verifiably type safe. 

Nulls are a problem in all the languages people have “flocked to” according to you, so I don’t really get your point. Nonetheless, Java has really good static analysis going for it that will catch every potential null, preventing run time exceptions."
520,lelanthran,1628063286.0,1.0,"> edit: downvoting this, much like your obsession with types, is a waste of everyone's time

I didn't downvote you."
521,TheIncorrigible1,1627950830.0,4.0,JYTHON is a dead project just like the other Python runtimes (like IronPython being .NET)
522,Muoniurn,1628244411.0,1.0,"Yeah, please do a Java. But also mention which is the perfect language that doesn’t encourage bugs?"
523,devraj7,1628003005.0,9.0,"The point remains that the lack of type annotations makes automatic refactorings impossible (they require human supervision), which is a huge obstacle to maintaining large code bases."
524,ep1939,1628028895.0,1.0,"What makes python strong?

Most lisp dialects are dynamically strong typed languages, but Python..?"
525,Riptide999,1627979393.0,3.0,"Use venv in production too, or containers all the way."
526,Riptide999,1628024328.0,1.0,My comment was a response to having two versions installed by default in a distro. If you need to run legacy py2 code feel free to install it if it's missing in your future distro.
527,Expensive-Way-748,1627995762.0,1.0,">No, in those languages, it'd be '0'. 

':', actually, but yes, I've misread the quote type."
528,AlexHimself,1627958952.0,5.0,"So if I barely know any JavaScript and was planning to learn, should I just start with typescript?"
529,noc7c9,1627959633.0,10.0,"I'd be curious to see a JS project that's setup to give me ""90% of the benefits of typing"". In my own attempts with `checkJs` set the type inference fails to handle very basic functions. And the solution I always see is ""write JSDocs"", but at that point wouldn't it be better to just write TS directly?

I feel like I'm missing something here."
530,lordcirth,1627957209.0,5.0,"Types are compiler-checked documentation. If you weren't writing types, you'd just need more documentation elsewhere."
531,UrgentlyNeedsTherapy,1627946647.0,18.0,"> Maybe instead of downvoting strangers out of ignorance, you should educate yourself on what's possible in tech today?

I didn't downvote you. I've downvoted you *now* to prove that.

> With VS Code type inference you can get 90% of the benefits of Typescript without writing a single type.

I was working with VS Code in the original JavaScript project. It didn't provide much help. It's become much, much easier to work with now that it's been rewritten in TypeScript, though."
532,agent8261,1628015962.0,3.0,"> You don't have to waste a ton of time writing types? 

I have never looked back on a project and went ""man I wish I didn't have to write types."" I'm not even sure how you would even come to that point of view. The vast majority of my time is spent testing and debugging. And for debugging types are a godsend."
533,trinde,1627946568.0,16.0,How does it take any time to write types?
534,tgiyb1,1627964685.0,3.0,when typescript gets confused you can just throw down a @ts-ignore and leave a comment. It's not really a huge deal as long as its documented which is kind of the whole point of typescript
535,UrgentlyNeedsTherapy,1627979012.0,2.0,"It never did that. While working with the legacy JavaScript project, it was almost like trying to write code in Notepad except with syntax highlighting.

As someone else pointed out though, apparently you need to add a jsconfig file to enable type checking in VS Code for JavaScript."
536,agent8261,1628020744.0,1.0,"> There's a reason dynamically typed languages like JS, Python, Ruby, etc. have all been incredibly successful, and have taken huge chunks of market share from statically typed languages like Java.

It's not because of their type system. Python in particular is used for web development (the area where throwaway code excels). A language is a bunch of tools. Just because one of it's tools is crap, doesn't mean all of it's tools are. In other words, those languages have value in spite of their poor typing system.

Perfect example is COBOL.
https://medium.com/the-technical-archaeologist/is-cobol-holding-you-hostage-with-math-5498c0eb428b

Nobody would argue that COBOL has the best design, however it does excel in some areas so it continues to be used."
537,exonac,1627977058.0,0.0,Javascript can be a non-strict FP language.
538,_tskj_,1627947258.0,-44.0,"F#, Kotlin, Clojure, Elm, take your pick."
539,_tskj_,1627947524.0,4.0,"F# was mentioned elsewhere in this thread. Luckily C# tries very hard to incorporate some of the good stuff. For instance async/await as we know it today first appeared in F# more than ten years ago. Of course, C# still hasn't quite gotten that one right, and that feature alone is so much smoother that it's worth using F# for. Other things include tuples, records, value objects, computation expressions (linq kind of tries, but again it's this thing where it has 10% of the features and 1000% the complexity *and* isn't integrated into the rest of the language). The list goes on!"
540,_tskj_,1627947853.0,6.0,"You're kind of right about the community and Microsoft support of course, but still. Have you tried to use HttpClient in C#? It is literal burning garbage (and everyone including the community agrees with this), yet it still hasn't been fixed or replaced. So I don't know how much Microsoft can actually be supporting C# as any kind of web language? Also as far as web goes, F# has frameworks that are leagues better than anything available in C#.

You're right that the ecosystem is strictly bigger for C#, but it doesn't have anywhere near the same quality. The best F# things are easily 10x better than the best C# things. You can also trivially call any C# code directly from F# so it isn't much of a big deal."
541,_tskj_,1627948457.0,3.0,"We've discussed this elsewhere in the thread, but I can repeat it for you, F# is widely considered good, so is Kotlin. Clojure is a great language, Elm is fantastic. It depends on what you want to do! C# and Java are general purpose languages in the way a one-handled scissor is general purpose. You can sort of stab and cut and maybe hammer with it, but it isn't great at anything - not even at being a pair of scissors which is what it kind of tries to be."
542,_tskj_,1627949784.0,2.0,"Ahh this is such a fantastic comment! My comment would have been spot on about C 20 years ago, and it would have received the same reaction. People downvoting and hating on anyone saying C isn't a completely fine language to do web development in or whatever. But the thing is, C# is as bad a language to do web dev in compared to any of the good languages, as C is to C#. If not worse! That's how good the *good* languages are. Why you won't believe me when you haven't written a single line of code in them is beyond me.

I hope it won't take another 20 years for the prevailing sentiments to change again."
543,_tskj_,1627984800.0,1.0,Haha yeah there certainly is some of that going that direction as well.
544,shengchalover,1627973982.0,10.0,"Can confirm, I use Swift and often google  some Apple’s API docs ending up on Microsoft docs for Xamarin.

Tells pretty much everything about the state of Apple vs Microsoft dev environment."
545,BubuX,1627962632.0,7.0,"Perl, Bash and PowerShell above C#?

that chart is BS

here is the screenshot since the link doesn't work for me: [https://i.imgur.com/HGllAUS.png](https://i.imgur.com/HGllAUS.png)"
546,hypocrisyhunter,1627976782.0,1.0,In London that chart is rubbish.
547,Carson-Drive,1628003733.0,1.0,"That chart means nothing, if you have experience in C# you will get paid. Even if there's some truth to the chart, tell me, of the languages above C# on there which one has more jobs in the market? I can only think of maybe Python and that's roughly around the same pay grade as C# according to the chart.

You also need to consider the people that answered the survey, this by no means is a representation of how much you will get paid, not even close, since pay grade differs company to company, state to state, and country to country."
548,wllmsaccnt,1628539716.0,1.0,"C# and [ASP.NET](https://ASP.NET) Core are both ""coded up"" and maintained by Microsoft. Perhaps different teams, but there is a lot of crossover (e.g. new C# features have to be compatible with [ASP.NET](https://ASP.NET) Core Razor syntax)."
549,Sadzeih,1628030513.0,4.0,"For the stack and queue, that's because people usually use a slice for stacks and channels for queues. For the set I agree it's kinda annoying to have a map just for that though. All those issues are also due to the lack of generics too, which are coming in 1.18."
550,watsreddit,1628046536.0,3.0,"From my experience on both small and large codebases.

Smalltalk's got cool stuff and I'm not surprised it has a mechanism for systematic refactoring similar to what you would get out of a type system. The fact is though that most dynamically-typed code in production today is not Smalltalk, but languages like Python, Javascript, PHP, etc. Those languages, to my knowledge, have nothing close to such facilities, or at least, nothing that should be trusted."
551,,1628001616.0,-1.0,"> you should be able to see how you are indeed part of the very problem you are ranting about.

No, I can't see that. No one with common sense can. Especially since I made it clear that I'd like to see these kinds of low-quality low-effort clickbait posts banned from this sub. That was a solution to get rid of the problem and which has been tried out in different subs where it worked."
552,,1627996129.0,-12.0,"> In grand scheme of things, the only thing that matters is trends.

Jesus, I don't know whether to laugh at this or feel pity for you. Are you an instagram influencer/youtuber or a programmer?"
553,,1627996358.0,-4.0,If you could read you'd know that the problem I mentioned is not (just) this specific post but the proliferation of low quality low effort clickbait posts like this all over this sub which naturally attracts more attention and drowns out the better quality posts.
554,Frozen_Turtle,1628021296.0,2.0,Oof not that I'm aware of. TBH though I think getting a job at 300k for any language is quite a feat.
555,Frozen_Turtle,1628027824.0,2.0,PMed
556,devraj7,1628030728.0,1.0,"I'm not modeling anything, I was just pointing out that your claim was a non sequitur.

The fact that finding Clojure developers is hard doesn't imply that there are a lot of jobs or that these jobs are easy to find."
557,squirtle_grool,1628000881.0,1.0,That's fantastic. Thank you for your perspective!
558,squirtle_grool,1627977673.0,9.0,"I think it's due entirely to comfort levels of management with a particular technology. Founders/managers who are inclined to treat devs as replaceable code monkeys, are more likely to favor tech stacks that are used by many people. Ah, C#? Microsoft, big name. Big talent pool, replaceable programmers."
559,squirtle_grool,1628007388.0,3.0,"Yes, functions like filter/map/reduce/zip that are pure and operate on collections are the right way to get good at functional.

Scala is a good language, but certainly doesn't go as far as clojure in encouraging purity. They both run in the JVM however, so they can interop nicely.

""Functional"" languages don't do much more than treat functions as first class citizens. It's up to you to write pure functions and minimize state manipulation.

Read Clojure for the Brave and True, and Martin Fowler's paper on Collection Pipelining.

Also watch the Simple Made Easy talk by Rich Hickey."
560,tharinock,1628106020.0,1.0,"What Scala gives you is pretty different from what Closure gives you. Closure is a Lisp, while functional Scala is much closer to Haskell.

Scala gives you a TON of utility over functional java. After learning Scala, Java's type system feels anemic. Complicated frameworks like Spring are entirely unnecessary in Scala, since you can express things much more cleanly with just the base language."
561,Oggiva,1628033958.0,2.0,"I can report that we `copy` half a million rows per second into a newly truncated table with no indexes. In total almost 17 million rows. With the right hardware and a simple enough table I guess you could reach a million per second, but it’s not the most common use case."
562,stringbeans25,1627961107.0,1.0,Was looking for this as well. I’ve seen some cool things done with COPY but never heard of that scale.
563,wishthane,1627981434.0,1.0,"Migration isn't a problem, you can add columns and all of that, though if you want to reorganize it isn't as simple as dropping one index and creating another as it might be in a a relational database.

I believe this has more to do with individual rows. If you have a lot of updates to the same data all the time, or you're deleting a lot of data all the time, you might have trouble.

Personally I'm not really sure about this, relational databases work similarly for deletes (marking the old row as invalid until it gets vacuumed up) and do the same for updates except that they can just append the new row without thinking too hard about where it has to go - whereas in Cassandra, the data is actually organized by its primary key so it has to go in the same place. I could imagine that might cause trouble if the same keys are getting updated all the time, lots of rows getting invalidated, growing that part of the dataset and then being forced to compact it immediately if it got too large.

But I'm not that well versed on Cassandra so I can't say for sure."
564,Sadzeih,1628022079.0,2.0,I honestly don't see what's so complex about the `CronJob` in k8s
565,7sidedmarble,1627989799.0,8.0,">Its not really a tool that you use as a programmer.

If only we all had dedicated Devops guys..."
566,random_dent,1628023972.0,1.0,"We were using gcp's monitoring for one launch for a client on google cloud. Definitely simplifies things. Mostly we're on AWS, tends to be a client choice, but we have a lot of pre-k8s experience on aws.

Explain is helpful. The completely ad-hoc way we've had to get a grip on all this means I'm sure there are a lot of obvious commands and such I don't know about at all. I've learned each piece strictly as needed because I'm not given enough time to do any more than that. Every time I think I'm going to have a week to get a handle on things suddenly it's nope, we need to launch and go live on production in a week."
567,Sadzeih,1628021861.0,3.0,Do you even `--help` ?
568,MisterFor,1627982771.0,2.0,Because you shouldn’t share classes between microservices
569,pewqokrsf,1627968263.0,4.0,"Unless you're writing VS Code in VS Code I don't see your point, and I hate JS."
570,ILikeChangingMyMind,1628001147.0,0.0,So if I write JS in an editor that's built in C I'm writing C? That's a terrible argument.
571,ILikeChangingMyMind,1628004914.0,1.0,"So spell it out for stupid little old me, who evidently knows nothing about TypeScript or typing systems (nevermind that I coded primarily in Java for half a decade, and in TS for about half a year): besides the (*clear and obvious*) tooling benefits, and the also obvious (but not at all clearly meaningful) fact that it saves you from ""I accidentally gave a string when a number was expected"" errors ... 

... what is this amazing bounty of non-tooling, non-basic-type-checking benefits TS offers?"
572,tjl73,1627982678.0,2.0,Python is what I use whenever I need to do something quick. I also do some prototyping of different ideas in it.
573,FunctionalRcvryNetwk,1628001119.0,3.0,"How would that even work?

You have a fundamental misunderstanding of structures and data on a computer. Lower languages cannot just make every object a hash map of fields."
574,jl2352,1627991196.0,12.0,"When you have a function that takes a `T : AsRef<Box<Future<Arc<dyn Foo>>>>`, and what you have is a `Bar`. Which cannot be passed in. However it can be if you add `use ::blah::Foobar` at the top of your code.

I'm being overly dramatic, but things not far from that does happen."
575,AustinYQM,1627956094.0,22.0,People were given a grid so your desire to work with JS wouldn't stop you from also selecting wanting to work with python.
576,miembro_maniaco,1627956636.0,5.0,"Considering it's not uncommon to use more than one language in a given job, I'd say it's a good indirect estimator of that, because it can read not just as ""I'm interested in learning other stuff"" but ""I actually want to stop using this""."
577,_tskj_,1627946058.0,-8.0,"I don't know, I meant it's in the dataset - or do I misremember the survey?"
578,Karma_Policer,1627954841.0,23.0,"C++ was my first programming language. I didn't see anything wrong with it because, you know, I didn't know any other language. However, today, 10 years later, after having learned more than 10 other languages, I think it's one of the most disgusting programming languages out there.

I used it again last year for a pet project and it was a nightmare. The syntax was annoying, memory management was annoying, headers were annoying, and the cool features required cryptic knowledge and constant checking of the awful reference. RAII is the only good legacy of C++.

I've been using Rust for two years and I'm pretty happy so far. It's not perfect, but it's the best systems programming language that I know of. C# was my previous favorite."
579,hardolaf,1627998014.0,-1.0,"I don't know of any that are currently available. But I can see the performance issue just compiling release code in C and Rust that do the same thing and comparing results. Basically, Rust is fine once you go above the hardware level, but at the hardware interface level, it's still a mess due to the memory ""safety"" that it tries to enforce."
580,swoleherb,1627993569.0,0.0,"I doubt much has changed from last year

https://www.zdnet.com/article/developers-love-rust-programming-language-heres-why/"
581,renatoathaydes,1627991024.0,1.0,"Thanks, posted a question there: https://discourse.julialang.org/t/help-to-get-my-slow-julia-code-to-run-as-fast-as-rust-java-lisp/65741"
582,delta_p_delta_x,1627951011.0,4.0,"> Matplotlib is a beast - but when you really need to control the plot precisely or you want to do something out of the ordinary I haven't found anything else that's nearly as good.

Have you looked at [TikZ](https://ctan.org/pkg/pgf?lang=en) and [PGFPlots](https://ctan.org/pkg/pgfplots?lang=en)?"
583,Kirk_Kerman,1627959981.0,12.0,✈️
584,steveklabnik1,1628002160.0,2.0,You’re downvoted but you are correct. (We would not accept a PR though.)
585,Muoniurn,1628195672.0,1.0,"So you honestly want to compare a decade-long legal battle between tech companies to “you will get sued for writing System.out.println”? Do tell me how OpenJDK is any way different from the linux kernel? How come Linus haven’t sued me yet? 

Just because you written a few lines of Java makes you a lawyer or what? Do fucking inform yourself before spewing nonsense."
586,falconzord,1628196084.0,1.0,"Yes but those arose out of the failures of Oracle, similar to Mono and others for C#, but most are back on .net as Microsoft has done a better job with the community"
587,ObscureCulturalMeme,1628197192.0,2.0,">How the fk do you want to pay oracle without an oracle contract??!

You have badly misunderstood the conversation.  Nobody has suggested that."
588,ILikeChangingMyMind,1627954272.0,7.0,"Well technically that's not OO though right?  In a ""true 100% OO language"" everything is a class or object: you can't just have standalone expressions.

Not that I'm in any way saying C# needs to be 100% true OO!  I'm just saying that my comment was specifically about languages that are, like Java (although since the introduction of lambdas even Java isn't anymore)."
589,ILikeChangingMyMind,1628015957.0,2.0,"It's incredibly simple to me: more code that conveys more meaning is good.  More code that communicates nothing is bad.

Curly braces *are not needed to convey scope*!  There are entire languages (eg. Python) that rely on nothing except indentation for scoping (well, and a `:` on the previous line), and they are incredibly popular and successful.  Braces are an example of the meaningless code that doesn't add anything of value.

To be clear: I'm the kind of dev who will write `aLongVariableNameLikeThis` over `x` every day of the week!  Again, *meaningful communication* should be highly prized in programming ... but pointless curly braces aren't that."
590,ILikeChangingMyMind,1628197796.0,1.0,When did I ever say anyone does?
591,ragnese,1628257067.0,1.0,"> Whaat? Generics are type safe. Erasure is the default way of basically every typed language (other than C#), eg. haskell erases every fucking type and you will not get type errors at run time. It is the same way with Java as well. Unless you write List instead of List<Something>, it will never fail at runtime (other than perhaps modifying some shit with reflection) because it is verifiably type safe. 

You are correct. Generics are technically type safe. The issue is *specifically* with the way Java's generics work with the rest of Java's weak type system. Java has a very naive and not-very-expressive type system and no macro system, which forces us into using runtime reflection *frequently*.

Annotations exist in Java as a bandage over its unexpressive type system. But annotations are not generic-aware (they can't be). So, anything that works with annotations and deals with any generic type is going to have a hard time. See: JacksonXML for a great example. Jackson is the de-facto serialization library for Java the last time I checked. Go ahead and write an example of how to deserialize a user-defined generic type from JSON. It's a nightmare. Also take a look at the Github issues for the various Jackson sub-projects and see how many are related to generics and trying to specify type information in the annotations. I'm picking on Jackson here, but it happens with other things as well- and when's the last time you wrote a Java project without an annotation-heavy library of some kind? It's always something: Spring, Hibernate, Jackson, Mock libraries, Lombok, whatever.

Java supports class inheritance and only just recently sealed interfaces/classes. Before that, the only way to encode anything similar to an ADT was to use runtime polymorphism and check the type of an object instance at runtime. Granted, that's not really ""good OOP"" that Java experts probably wanted you to do, anyway... But it's a tool that Java made available and people used it.

So runtime type reflection is a huge part of idiomatic Java. Generics are also a huge part of idiomatic Java. Do you see the issue here? Type-erased generics are incompatible with runtime reflection. So, it's not Java's generics, *per se*, that are the issue- it's Java's type system *as a whole* that's a problem. It erases some type information and then kind of pushes us to use runtime type reflection...

Haskell doesn't have these issues for two reasons:

1. It just doesn't have ANY runtime reflection. This is a pretty effective way to prevent people from even TRYING to write libraries like Hibernate or JacksonXML for Haskell. (Yes, that's tongue-in-cheek, but also... kinda not...)
2. Its type system is strong enough that we mostly don't MISS runtime reflection. 

> Nulls are a problem in all the languages people have “flocked to” according to you, so I don’t really get your point. 

Which languages are you talking about specifically? The dynamic ones I listed or the ""thank goodness"" ones I listed?

The point with the dynamic ones is that devs made the reasonable argument of ""Why would I bother with Java and its noisy types when I'll just get runtime type errors anyway? I can use Python, get the same type bugs, but at least I don't have tedious noisy code.""

Go *does* have the same nullness issues as Java, so you're right there. It wasn't the best example to include in my list (and I personally hate Go anyway)

But Rust and Swift absolutely do NOT suffer from the null problem that Java does. Neither does pure Kotlin, either. Even TypeScript doesn't (even though I don't like TS either). 

Almost every new statically typed language since 2010-ish has learned from Java's null mistake and fixed it. Go is literally the only exception I can think of. Every single other statically typed language born in the last 12-ish years that I can think of has zero issue with nullness in the type system."
592,ILikeChangingMyMind,1627953971.0,2.0,That's sad to hear.  It will just mean more JRuby shops out there (and personally I think Python is a much better language than Ruby).
593,ragnese,1628255011.0,2.0,"Sure, let's do a Java.

Here is a short explanation of how the Java language encourages programmers to write incorrect code.

### null

In Java, every reference to a boxed type can be null. This means that almost every single variable in a Java program can be null. However, the Java type system does not force the programmer to handle the possibility of null. So, if you write a function that accepts a parameter of type/class Foo, anyone who calls that function can pass null. Furthermore, in the implementation of the function, the programmer can treat the parameter as though it is definitely a Foo and not null.

It is very easy to accidentally forget to check for nullness when the language is perfectly happy to compile and run if you don't check.

This is a very obvious and clear example of Java encouraging buggy programs. There's no good reason to not give programmers the ability to declare to the type system that nulls are not allowed for a certain variable/parameter **or** to at least force the programmer to handle the possibility of null for every instance of a boxed type.

You may then point me to the multiple libraries that provide annotations such as some listed [here](https://stackoverflow.com/questions/4963300/which-notnull-java-annotation-should-i-use).

Those certain help, but:

* Those are not part of the Java language, so they don't provide a counter-argument to my assertion that the Java language encourages bugs. They are just libraries that people have written for Java because Java is bad.
* Those annotations can't and don't alter the type system. They don't cause buggy programs to fail to compile and run. In actuality, they don't *do* anything.
* Even for static analysis, they are insufficient because I can just FORGET to annotate one of my function parameters with @NonNull and then we're at square one.

### Concurrency

Concurrency in Java is unsafe from data races by default. There are two ways to prevent data races in Java: 

1. Never send mutable data across asynchronous contexts (i.e., threads)
2. Wrap access to mutable data in some kind of locking mechanism such as synchronized blocks or mutexes.

Neither of those happen by default. A programmer has to be trained to do the right thing. Java has no concept of immutability at the language level, nor does it have any kind of ""AsyncSafe"" declaration when you define a Class that enforces synchronization of mutations.

Lots of newer languages now either encourage or enforce immutability of all things, specifically to be data-race-safe by default. You also have Rust, which has really neat language concepts that allow the compiler to reject code with data races without forcing everything to be immutable.

So, *by default*, concurrency in Java has data races. Ergo, Java *encourages* the programmer to write buggy concurrent code.

### Java Arrays Are Covariant

Java's Array type is intentionally implemented incorrectly because it was seen as more convenient and less confusing for newbie programmers. So, instead, newbie programmers are going to experience runtime crashes instead of compiler errors... -_-

https://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html#jls-10.5

### Wraparound Arithmetic

In Java, we may declare that the field of a class is a `short`, which has a range of -2^15 to 2^15 - 1. If you add two positive shorts together, you can end up with a negative number. That's almost definitely NOT what the programmer intends to have happen.

There are multiple ways to make this less bad. You could throw an exception on overflow, which doesn't prevent the bugs, but it *does* cause a crash when the bug is encountered instead of proceeding with invalid data. Or you could make BigInteger the default integer-like type (and just name it ""Integer"" or ""Int"") and kind of ""hide"" the specifically-sized number types in some deeper package in the standard library that's only intended for performance-sensitive stuff.

But, instead, we have these silent wraparound types front-and-center in Java.

### Weak Type System

I could go on forever about this, but I'll try to keep it short.

Type-erased generics cause tons and tons of runtime bugs and bad APIs. See the bug reports for libraries like JacksonXML and the standard library Map API (How do you correctly check that a value is present in a Map if the values inside the Map are allowed to be null?)

No unsigned number types. Unsigned numbers are great for public APIs. How often do you *actually* want negative numbers? It's pretty rare in my experience. So we're forced to either define our own, inefficient, wrapper classes or do manual checks and throw exceptions. Very inefficient and bug-prone.

As I mentioned above, there's not concept of `const` in the language. So when you define a class, you have to decide if it'll be mutable or immutable for 100% of users of the class. Some languages allow for call-site control over whether an instance will be mutable or not. So, you can write a function that is contractually required to not call mutating methods on some or all of its parameters, or you can write functions that say ""you need to pass me a mutable instance because I'm going to modify it"". Can't do that in Java.

Relatedly, there are no read-only or immutable collection interfaces in Java. So you're stuck with read-only *implementations* which still have all the same methods as the full mutable interfaces- they just throw exceptions when you try to call them. That's not helpful at preventing programmers from writing bugs.


Honestly, I could go on, but I'll leave it there so I can do some work today."
594,Muoniurn,1628196631.0,1.0,"You can’t add an int to a string on a runtime level. JS and python are both dynamically types (no explicitly typed types) but the former is weakly (the above example will be converted to a string or an int) typed while python is strongly (it will throw an exception). 

Another example maybe typescript which is statically typed but is still weakly (due to compiling to js)."
595,,1627990313.0,2.0,[deleted]
596,hardolaf,1627980318.0,-3.0,"Sure, venv might work, but businesses being businesses, they don't want incompatible versions of software on the same box. As for containers, they're not zero overhead abstractions on top of hardware."
597,moomoomoo309,1627995962.0,1.0,"Darn, I thought 0 came after 9 in ASCII, rip"
598,Fatal_Oz,1627959371.0,18.0,"Typescript is a superset of Javascript, so you're learning typescript while learning javascript, as all Javascript is valid Typescript (notwithstanding strict type compiling)"
599,delta_p_delta_x,1627964019.0,3.0,"> should I just start with typescript?

You only need one *very* nice resource, from the horse's mouth itself: the [TypeScript Handbook](https://www.typescriptlang.org/docs/handbook/intro.html)."
600,ILikeChangingMyMind,1627967569.0,2.0,"I'm not sure what to say: I use `checkJs: true` all the time, don't do anything special (eg. I don't use JSDoc types), and all the features I mentioned (automatic imports, go to type definitions, etc.) ""just work"".

I truly don't do anything special to make them work, so I'm not sure what you'd be doing to make them *not* work.  If I had to hazard a guess it'd be that you have some environment detail, like say some sort of ""import hack"" (eg. setting your NODE_PATH so imports start relative to your `src` folder) which is confusing VS Code ... although that specific hack I fixed with with the `baseUrl` option."
601,ILikeChangingMyMind,1627967360.0,3.0,For *some* projects!  Not every project needs comprehensive type documentation.
602,ILikeChangingMyMind,1627946837.0,-8.0,"Were you using VS Code's type inference at all?  You do have to enable it in your jsconfig.js file, it's not just on automatically."
603,ILikeChangingMyMind,1628016151.0,1.0,"I literally wrote TS for six months and at the end felt ""all those explicit types I wrote were a waste of time: they didn't help us meaningfully"", so quite simply I disagree.

But look, can we agree to disagree, and just agree that not every software project is the same?  Some are contract jobs that last six months and will never be edited again.  Some are on apps that will live for decades.  And there are all sorts of other variations and permutations that will similarly impact technical decisions.

Pretending that because you (or any dev, anywhere) made one technical decision for *your* codebase (no matter how correct of a decision it was *for your codebase*) and insisting that everyone in the world make that same decision is not smart."
604,ILikeChangingMyMind,1627946638.0,-2.0,"Ummm .... the answer is so self-evident I don't even know how to respond to your question.

Like, have you actually used TypeScript?  You *cannot do so* without spending a non-trivial amount of time writing types ... which makes sense given that it's **Type**Script, and the whole point of it is *explicit* typing (as in, *writing* types)."
605,binarycow,1627991334.0,-1.0,">It never did that. While working with the legacy JavaScript project, it was almost like trying to write code in Notepad except with syntax highlighting.
>
>As someone else pointed out though, apparently you need to add a jsconfig file to enable type checking in VS Code for JavaScript.


I was referring to decent IDEs and decent languages, like Rider and C#"
606,ILikeChangingMyMind,1628023322.0,1.0,"> Python in particular is used for web development (the area where throwaway code excels)

You are *woefully* ignorant here.  Python *is* used on many web apps, but it's also used in critical life sciences technology (eg. I worked at a  ""precision medicine"" company that looking at your DNA to figure out what cancer drugs would work best ... and it was written in Python).

It is very much not a ""throwaway"" language, or a language only suited to throwaway products."
607,ahiskillevel999,1627980002.0,7.0,"Javascript can be anything if you're brave enough. 

And no, I'm not crying inside, why do you ask?"
608,pheonixblade9,1628009893.0,1.0,"Well, to be non-strict in F# you do have to explicitly ask for it. That's not true for js."
609,,1627948830.0,11.0,"Why are these better? I get that they may *feel* better to program in because their syntax may make more sense, or they may perform better.

But if you're creating an enterprise application, wouldn't a language like Clojure be more trouble than it's worth?"
610,emannnhue,1627949218.0,34.0,"Probably your comment would have landed better if you had cited anything other than your own personal opinion. I dislike C# a lot, but I wouldn't try to throw that in the face of people who like C# and are effective with it just because I think my language of choice ""feels"" better. If you want to convince people to try to change away from a tool they spent a lot of time, energy and effort to master, you'll need to be more convincing than that. That's all I'm saying."
611,r2d2rigo,1627950905.0,16.0,"""tell me that you don't code without telling me you don't code""."
612,Frozen_Turtle,1627948589.0,10.0,"It blows my mind that F# came up with async/await (aka computation expressions) before C#... yet when C# copied it, it did so *breaking compatibility* with F#, and implemented only a strict subset of its functionality. F# literally showed it, using the same VM, how to make something that generalized to _any_ monad, and they were like ""nah, we only want the list and async monad, and we're gonna do them both in their own special syntax cause lol.""

Makes me boil."
613,TirrKatz,1627948413.0,11.0,"> Have you tried to use HttpClient in C#? It is literal burning garbage

Of course, I did. Way many times. Maybe because of this I am too used to it. But I don't have that bad impression as you have. Yes, it has weird IDisposable pattern recommendations. Yes, it has HttpClientHandler-level properties that can't be redefined per request (cookies, websockets). But in overall it's solid and good tool, that does its job pretty well (way better than old trash called WebClient). Still, I agree, that you need to teach developers to work with it properly.

> yet it still hasn't been fixed or replaced

I would love to hear, how it should be ""fixed"" or what should replace it. As far as I know dotnet team is working on more low-level HTTP protocol implementations, that will be used inside of HttpClient. So, in the future you will be able to write your own high-level class that will work with these lower-level APIs (still higher level than plain sockets).

> The best F# things are easily 10x better than the best C# things

I am not sure how to react to this. Sounds too bias."
614,BobSacamano47,1627950801.0,3.0,What language is better for web dev than C#?
615,Frozen_Turtle,1627963078.0,6.0,"Not from this year, but

> In all these countries, DevOps specialists are the top earners

https://stackoverflow.blog/2018/09/05/developer-salaries-in-2018-updating-the-stack-overflow-salary-calculator/

FWIW having dabbled in many technical areas I consider devops the hardest."
616,FunctionalRcvryNetwk,1628002438.0,1.0,"Clojure devs making bank out here. Except there’s no jobs.

Those are devs that already had a job at that pay and are hamfisting clojure in to their existing work because FP is trendy."
617,anonveggy,1628045967.0,1.0,That's because these languages are stronger with roles with higher ranking salaries - devops engineers for example tend to use PowerShell and bash way more than regular full stack devs.
618,Frozen_Turtle,1627995019.0,1.0,"""What can be asserted without evidence can also be dismissed without evidence."""
619,Frozen_Turtle,1628004271.0,2.0,"Holy crap people keep disagreeing with me while providing zero data. I am ***thoroughly*** triggered, especially because the OP's claim is

> Gotta be one of the best paid too

while the article they're commenting literally states the opposite.

https://www.statista.com/statistics/793628/worldwide-developer-survey-most-used-languages/

C# is below Javascript, HTML/CSS, SQL, Python, Java, and Bash. Please for god's sake if you reply use a bloody citation."
620,,1628083591.0,1.0,I didn't realize a fix was coming soon. That's really encouraging.
621,igouy,1628094058.0,1.0,"> … is not Smalltalk, but languages like Python, Javascript, PHP, etc. 

And we both know the difference **is not** that *Smalltalk* provided compile-time checking while ""Python, Javascript, PHP"" did  not."
622,WaywardTraveller,1628001825.0,2.0,"Dude, you're ranting against a long running annual survey and you're clearly in the bottom of the minority of people getting their panties in a bundle about it.

If you cared as little about it as you _say_ you do (actions withstanding), you would ignore it and move on.

And yet, here we are."
623,gutigen,1627997165.0,6.0,"Part of the job in this industry is selling ideas, which is no different than any other creative job out there. And if that's news to you, we are not factory workers, we are creatives or we are bad at our jobs.

I wonder, who chooses technology stack you work with?"
624,crab-rabbit,1628001610.0,2.0,you should post something high quality then
625,notoriouslyfastsloth,1628022197.0,1.0,"dang ah well, i hope u dont mind i keep u in mind if i ever lose my job :D"
626,homonomonohomo,1628012515.0,2.0,"FWIW that's my anecdotal experience, too. If you want to commoditize your programmers, it would make sense to go with Java, C# or Go."
627,Dokiace,1628010779.0,2.0,"I couldn't sleep tonight so might as well watch some good talks, thanks!"
628,random_dent,1628027017.0,1.0,"Here's an example of my issue with their documentation:

    -v, --v Level  
    number for the log level verbosity.


Great. What are the valid levels? 1-5? 0-9? Hell, based on just this I wouldn't know if they use integers or strings (DEBUG, ERROR etc.) (hint: kubectl options will provide an example using 0, so that's a valid value at least, but why does the docs website not say this?). What gets output at each level so i can choose?   
All their documentation is like this. It leaves out key information and doesn't provide details.  

Compare that to the log-level instructions for something like OpenVPN which provides:

    0 is silent, except for fatal errors   
    4 is reasonable for general usage   
    5 and 6 can help to debug connection problems   
    9 is extremely verbose   

It tells you the range (0-9) and what you should use the various levels for. I know for a fact based only on this it uses integers. Unlike Tomcat for example, that uses words like error, warn, debug, info and so on for its log levels.

Here's an example from the help menu: kubectl describe --help

    # Describe all pods   
    kubectl describe pods
    
Except it doesn't do that. It describes all pods *in the default namespace*. Now it does tell you further down how to select all namespaces, but it never tells you that this command runs only on the default namespace unless you specify. Something I'm sure those who actually know k8s take for granted as easy, but someone new to it won't have any idea. 

It also doesn't tell you that -n is a valid option to pass to specify a specific namespace.

Now try to learn k8s for the first time as you face deadline pressure with nothing but this type of documentation to rely on."
629,ILoveOldFatHairyMen,1628025977.0,-1.0,"Ah yeah. You've reminded me that even CLI is backwards in kubernetes. Taking inspiration from COBOL, they decided to make it look like English sentences just to fuck with all conventions. What the fuck."
630,dvtkrlbs,1627983124.0,1.0,I agree with that
631,daftmaple,1628006175.0,2.0,"I don't get how you're still missing my (and others) point. Your intellisense itself is TypeScript and your type inference **is** TypeScript. If you're using TS for the sake of writing every single explicit types, then you're clearly not getting the purpose of TS. You are using TS to type variables with complex structure or even behaviour, which allows you to maintain larger scale projects."
632,r0ck0,1628006309.0,2.0,"In terms of typing: 

* discriminated unions
* [utility types](https://www.typescriptlang.org/docs/handbook/utility-types.html)
* generics
* strictNullChecks
* [template literal types](https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html)
* [keyof/typeof etc, stuff to convert types to others](https://www.typescriptlang.org/docs/handbook/2/types-from-types.html)
* [and more...](https://www.typescriptlang.org/docs/handbook/advanced-types.html)

I've been doing TS about 3 years, using it every day, almost all programming done in it, and there's still heaps more of these advanced features that I don't know yet.  

And separate to that stuff, typescript reports a lot of non-typing errors."
633,Zyansheep,1628010223.0,6.0,"What?
I'm talking about how in Rust, you have to use trait functions to get internal values of structures that implement that trait instead of being able to manipulate those internal values as if they were defined from the trait directly in a generic context.

Edit: here's some RFC discussion about fields in traits https://internals.rust-lang.org/t/fields-in-traits/6933/5"
634,LindenRyuujin,1627975545.0,4.0,Not caring if you work with a language or not is very different from actively not wanting to work with one though.
635,squirtle_grool,1627959520.0,6.0,"C++ excels when that manual memory management becomes necessary. If you can't afford to have garbage collection kick in in the middle of a critical operation, a lower-level language like C++ is the way to go.

In cases where performance is not as big of a concern, a higher-level language like Clojure, or Python is definitely preferable. I'd still go for a language that at least gets compiled to bytecode, and where immutability is the default. Not great for writing super-fast code, but really fantastic for writing robust code.

Edit: Have been duly corrected about Rust. I need to check it out! Thanks."
636,NewDateline,1627988155.0,1.0,You will most certainly like R too ;)
637,sqlphilosopher,1628000709.0,3.0,">due to the memory ""safety"" that it tries to enforce
 
Is that difference also felt when using unsafe? I'll try to do some experiments myself. Sounds like a weird thing because the promise of Rust was memory safety without performance penalty."
638,I_NEED_APP_IDEAS,1627960091.0,8.0,🪂
639,emannnhue,1628195931.0,2.0,"> Just because you written a few lines of Java makes you a lawyer or what? Do fucking inform yourself before spewing nonsense.    
    
As I thought, a child with no interest in any level of real dialog. Disabling replies after this one and retaining my opinions as is, consider your last 2 comments e-waste, like yourself."
640,Muoniurn,1628196318.0,1.0,"No, it’s not. They are there because Java has a proper specification both at the language and the runtime level. So it’s not the usual case of “this is a language’s reference implementation, the spec is whatever the ref does”, and it made novel implementations possible. Eg, there is a hard real-time JVM that is used in the military."
641,Hall_of_Famer,1627970679.0,7.0,"In a pure OO language, everything is an object, but doesnt necessarily mean that everything has to be written inside a class. There are even prototypical OO languages like Self and IO, which are fine the way they are even though they dont have classes. 

Also true OO is about message passing, it is considered OO as long as everything happens as a message being sent to a receiver object. In Smalltalk, you write such a line like this: 

    Transcript show: ""Hello World"".

You send message **show: ""Hello World""** to object **Transcript**, and its OO and enough concise for a Hello World example."
642,agent8261,1628017938.0,2.0,">Curly braces are not needed to convey scope!  There are entire languages (eg. Python) that rely on nothing except indentation for scoping (well, and a : on the previous line), and they are incredibly popular and successful.  Braces are an example of the meaningless code that doesn't add anything of value.

We are just going to disagree here. I fundamentally dislike scope being communicated via indention. I personally think it makes things harder to read and give more opportunity for error.

Furthermore the success of these languages seems to be more a matter of a few specific domains that they excel than their scope syntax."
643,agent8261,1628019047.0,1.0,"> It's incredibly simple to me: more code that conveys more meaning is good. 

Yeah. There is nothing simple about that statement. I think the problem is you've been dealing with magic for so long you don't even realize the complexity you're ignoring. For example:

> Braces are an example of the meaningless code that doesn't add anything of value.

In python Indentation IS CODE. It conveys scope, scope is important. But in python scope is unseen and magical. Which leads directly to views like yours where, in a very real sense, you're advocating that scope is meaningless and adds no value.

If you intentionally meant to imply that scope is meaningless and has no value, then well, we can agree to disagree. However I will say you're proving my point. Only somebody who doesn't build and maintain complex systems would ever say scope is meaningless and has no value."
644,Riptide999,1628024099.0,2.0,"pyenv is a tool to manage installed Python versions. But it does have a plugin that makes it easy to create venvs as well.
But creating a venv is easy with just python itself 'python3.x -m venv <path>'. But pyenv makes it even easier with the plugin and it's auto switch version/venv feature."
645,noc7c9,1627978019.0,2.0,"Well I expect the following to show me type error:

    const stripPrefix = (string) => string.replace('prefix/', '');
    console.log(stripPrefix(1));

But I get nothing. Adding a JSDoc shows the error though.

    /** @param {string} string */
    const stripPrefix = (string) => string.replace('prefix/', '');
    console.log(stripPrefix(1)); // Argument of type 'number' is not assignable to parameter of type 'string'.ts(2345)"
646,lordcirth,1627996070.0,2.0,What sort of projects don't? The kind that fit on a page?
647,agent8261,1628016279.0,1.0,"> comprehensive type documentation.

""Comprehensive"" in this case is giving it a name. Are we so pressed for time that we can't name things?

> For some projects! Not every project needs comprehensive type documentation.

So basically projects that are being slapped together, don't matter, and we never plan on revisiting again."
648,UrgentlyNeedsTherapy,1627946893.0,15.0,"?

Why are programmers are so fucking hostile all the time? VS Code *is* the latest tech."
649,agent8261,1628019423.0,3.0,"> I literally wrote TS for six months 

>  Some are contract jobs that last six months

You're just proving my point. You've basically just told me ""I like using this because the projects I work on are disposable""

The main place that static typing matters is debugging and maintenance and you just told me that the stuff you work on doesn't  value the two most important aspects of software development."
650,UrgentlyNeedsTherapy,1627947202.0,18.0,"I find that the time it takes to write out types is vastly outweighed by the savings in time from providing explicit information to the compiler about the shape of your data and then being able to get help from the IDE while writing or modifyng code.

I primarily work with C# and I like having that same level of feedback while working with frontend code as with backend code."
651,trinde,1627946857.0,5.0,"Have you? You can literally just use ""any"" if you don't want to write out the type."
652,UrgentlyNeedsTherapy,1627991450.0,2.0,Why were you referring to C# when the entire thread of discussion here is about JavaScript vs. TypeScript?
653,exonac,1628012363.0,1.0,Are you saying JS is more of a non-strict FP language than F#?
654,_tskj_,1627949541.0,-7.0,"What? Why? [F# is the best enterprise language](https://fsharpforfunandprofit.com/posts/fsharp-is-the-best-enterprise-language/).

Writing an enterprise application in Java is literally wasting 90% of your developers' time on fighting the language. In F# any developer of almost any experience level can refactor thousands of lines touching hundreds of files in an hour long session without tests and be confident his changes *just work*. Have you ever heard of anyone doing that in Java? Of course not, it's probably such an outlandish statement that you don't even believe me and probably think such a thing is fundamentally impossible, yet this is common practice in many of these languages.

You don't notice it because you think this is the way it's supposed to be, but coming back from a good language, you realise you spend most of your days doing irrelevant work that shouldn't need to be done or writing 100s of lines for what should have been handled by the language. The most profound feeling I have writing C# at work is that I am actively stealing from my employer by wasting almost all of my time. If only I and my team had our other hand free."
655,_tskj_,1627949987.0,-46.0,"You're probably right. The most annoying thing to me is that people think they are effective in C#, and think it's a good language - that kind of shows how much they actually know. Turns out programming in C# is a lot more effective than writing everything in C or worse, hand writing assembler. Yet everyone believes C# is the best we'll ever have despite the obvious evidence."
656,_tskj_,1627951442.0,-5.0,"Wait, you think *I'm* the person who doesn't code? You think the guy who happily spends his free time coding in apparently obscure languages doesn't code, but the people who write 10 lines of C# a day and clock out at 4 do?"
657,svick,1627997275.0,2.0,"To be fair, F# does almost everything in its own special way (i.e. outside of IL), so I think it would be very hard to make C# compatible with the way F# is doing it."
658,_tskj_,1627948855.0,-9.0,Glad someone else gets it. Really shows the level of competency in our industry. Also those people who think async/await is the greatest thing since sliced bread yet still somehow thinks C# is a better language than F#. How these people manage to get dressed with their cognitive dissonance is beyond me.
659,Frozen_Turtle,1627961918.0,5.0,"> The best F# things are easily 10x better than the best C# things

Dude isn't wrong. Discriminated Unions *alone* are part of ~50% of my types in one of my projects, and they're virtually impossible to implement in vanilla C# without doing crazy shit like visitor pattern. You could import a library that gives you DUs, but without pattern matching working with DUs is annoying if not painful. I even use DUs outside my domain types to do ""railroad oriented programming"" https://fsharpforfunandprofit.com/rop/

Again, this is virtually impossible to do in C# because it lacks DUs and the necessary pattern matching. The best alternative in C# is to just throw a custom exception and then catch it... which is pretty much just a `goto` in disguise. Ew. I'm doing event driven architecture/event sourcing in my project, and as such literally _all_ my events are DUs. In C#/Java these events would be distinguished with Marker interfaces, then you need to do type sniffing to see what kind of event you're trying to handle, and then throw an exception if an unexpected event occurs. With DUs, everything's just pattern matching, and the compiler will yell at you if you fail to handle a DU's case - something that doesn't happen with type sniffing. Of course you could do visitor pattern... but then you'd be doing visitor pattern with its umpteen lines of code vs F#'s oneliner pattern match.

Anyway, just gonna say DUs alone make F# worth investigating."
660,_tskj_,1627948710.0,-7.0,"I am biased! Why would you think I'm not biased? I haven't worked *on* F# and I'm not payed by Microsoft, nor do I have any other incentive than wanting people to use the best tools that are available. I am biased by F# being great and C# being mediocre. Not sure why that invalidates my points, if anything it strengthens them. I have no hidden agenda."
661,_tskj_,1627950930.0,3.0,"Glad you asked! F#, Kotlin, Clojure, Elm. I'm sure more as well that I don't have extensive experience with, such as Elixir!"
662,BubuX,1627963533.0,-3.0,"""DevOps **specialists""**

emphasis on specialists.

Your run of the mill devops guy does not earn more than a C# developer."
663,hypocrisyhunter,1627998560.0,1.0,You haven't provided any evidence either. The chart you provided is US based.
664,Carson-Drive,1628005449.0,1.0,"First you cited the list from the survey saying ""**There are 22 better paying languages**"", then you provide another list from somewhere else that has a completely different order. Way to go proving my point on how useless these lists are : )

In any case, according to the link you have there mixing some of these things is rather absurd. Someone who specializes in HTML/CSS is likely not a programmer, but rather a designer of some sort (Unless you have a full-stack person who does a half assed job in the areas they're not very good at). Bash is another one, people who use it are likely System Admins, not programmers. That's beside the fact that people who program in C# are likely gonna know some of these other languages too, this is especially the case if you do web work, odds are you're doing SQL, Javascript, and HTML/CSS along with C#."
665,watsreddit,1628095142.0,1.0,"Obviously. The point I was making is that Smalltalk is the (tiny) exception, not the rule. What I said still stands for the vast majority of production software running a dynamically-typed language. One fringe language doesn't really change anything."
666,,1628001183.0,1.0,"Ha ha you're so all over the place I don't even know where to begin. Your so-called ""trends"" are made up and artificially inflated by companies who need to sell their software or get more developers. Trend is ephemeral bullshit, what matters are the fundamentals. Unix, C and the whole ecosystem that was developed for it are still popular and in use (in different variations) after 50 years not because Ken Thompson and Dennis Ritchie decided to follow some ""trend"" but because they used simple, consistent ideas that laid a strong foundation for everything that came afterwards. Actual creatives make their own trend not blindly follow whatever shit internet thinks is cool."
667,Frozen_Turtle,1628027860.0,1.0,LMK if you wanna *switch* jobs ;)
668,ILikeChangingMyMind,1628006843.0,0.0,"If I literally don't have a single line of *TypeScript* in my code base (only *JavaScript*), how can you possibly argue I'm doing TypeScript?!?

Again, it's like saying that because the text editor I'm using was written in C, I'm writing C.  No, *I am not*: I'm writing *JavaScript* in an editor that utilizes some irrelevant technology.  It wouldn't matter if the editor was written in Pascal or R or Scheme: **I would still be writing Javascript**."
669,ILikeChangingMyMind,1628007102.0,-1.0,"Your ""features"" all seem to me like they're just ""different ways to statically type things"".  Again, that's awesome ... if your goal is statically typed code, you want lots of ways to express that typing!

But for people who *don't* consider statically typed code an end to itself ... devs who just want to build sites that work (and keep working) ... what benefits (beyond having static types) does TypeScript offer?  Again, I acknowledge one HUGE, HUGE benefit of TS and other static typing systems exists: it's *not* just the typing, it's the tooling!

But beyond typing and tooling (which, as I've stressed over and over, you can get 90% of without explicit strong types) ... what does TS offer?"
670,FunctionalRcvryNetwk,1628017146.0,4.0,"I’m aware that people ask for it, I just don’t know why. Structures have specific data in them. It’s not like you can just get more data in to them; you’re fundamentally creating a new type, eg inheritance. 

Traits are not meant for implementation details either (although that can be mimicked by forcing the implementation of detail oriented methods)."
671,unrealhoang,1627959896.0,35.0,"Rust uses the same manual memory management strategies as C++. Rust is not higher-level than C++. Performance-wise, they are in the same ballpark."
672,Karma_Policer,1627960098.0,18.0,"The point is Rust gives you exactly the same control over memory as C++, and sometimes even more fine-grained. Ex: Rust's Standard Library has both atomically reference-counted and thread-local reference-counted smart pointers.

Saying Rust is higher-level than C++ is not exactly true. Rust was made with the specific purpose of replacing C++. It can be just as high-level and as low-level as C++ can."
673,svick,1627996066.0,3.0,"I think low-level can mean two different things:

1. Being able to express low-level things.
2. Having to care about low-level things.

While I haven't actually used Rust, I think it's as low-level as C++ in the sense 1, but is higher level in the sense 2."
674,Muoniurn,1628193293.0,1.0,"Just another nitpick, but the “problem” with GC is not latency anymore — at least Java’s ZGC promises less latency due to GC than the OS scheduler itself (less than 1 ms)"
675,hardolaf,1628001357.0,2.0,"> Is that difference also felt when using unsafe?

If you do everything unsafe, no. But if you keep going between unsafe and safe code, yes."
676,ILikeChangingMyMind,1628023529.0,-1.0,">Which leads directly to views like yours where, in a very real sense, you're advocating that scope is meaningless and adds no value.

> Only somebody who doesn't build and maintain complex systems would ever say scope is meaningless and has no value.

Do you actually read what people write, or do you just decide your opposition and write a reply without actually comprehending their response first?  It sure seems like the latter, and I have no time to argue with someone who makes up what I said so they can have imaginary (ie. ""straw man"") arguments with it."
677,ILikeChangingMyMind,1628000800.0,1.0,"Yeah, that's the 10% actually using TypeScript gives you (you still get *many*, things like type definition following and automatic imports, without it by just using type inference though).

Now I haved question: in your entire programming career, how much time have you *actually* lost to errors where you put a number accidentally in for a string, or vice versa?  Because I've been doing web dev for over a decade, and I'd estimate in total during that entire time I've lost under an hour.  In my experience such mistakes are not at all common, and when they happen they're extremely obvious (and therefore easy to catch and fix).

BUT ... if such errors really are a problem for you ... great, use TypeScript!  But don't declare (I'm speaking generally toward my original point here) that everyone in the world needs to be using TypeScript: some projects will benefit from it, and some won't."
678,ILikeChangingMyMind,1628016361.0,1.0,">So basically projects that are being slapped together, don't matter, and we never plan on revisiting again.

I love the smugness here.  You've decided what's the correct technical decision for every project in the world, and then decided that if you're ever wrong, it's the project's fault for being beneath your standards.

Meanwhile, literally billions (probably trillions?) of lines of type-less JS code in production is doing just fine in spite of your strong bias against it."
679,ILikeChangingMyMind,1627947283.0,-2.0,">Were you using VS Code's type inference at all? You do have to enable it in your jsconfig.js file, it's not just on automatically.

That's hostile?"
680,ILikeChangingMyMind,1628023421.0,1.0,"No I didn't, you *inferred* that.  I *never said* ""typing is good for everything except disposable projects""!  Quote me if I did."
681,ILikeChangingMyMind,1627947471.0,1.0,"This should be **painfully** obvious, but since it's not let me shout it from the mountains; **NOT ALL PROJECTS ARE THE SAME**!

It is 100% true that some projects benefit from TypeScript.  I've said that repeatedly.  It's also 100% true that many projects would benefit from sticking to JS.

I have nothing against people wanting explicit type safety for their project, but when they assume the world should do everything exactly as they do that's just ignorant.  VS Code gives *most* project 90% of the benefits of TypeScript, without a single wasted second writing explicit types."
682,ILikeChangingMyMind,1627947032.0,2.0,"You *can*, but A) we both know no one adopting TypeScript does that (as it defeats the entire purpose of the language), and B) even if you did, you'd just be writing Javascript with extra baggage (all those ""any"" types), for no benefit.  You'd be making a lie of my earlier statement: you'd be using Typescript with *just* costs.

Or ... you can not write any types, yet still get 90+% of the benefits of TypeScript anyway, thanks to VS Code's type inference feature.  To me that's the sweet spot (but again, I absolute recognize that the benefits of TS outweigh the costs on some other projects)."
683,,1627947234.0,1.0,what's the point of using typescript if you use `any`?
684,binarycow,1627991817.0,1.0,">Why were you referring to C# when the entire thread of discussion here is about JavaScript vs. TypeScript?

One of the parent comments was referring to strongly typed languages being a pain since you have to go manually change stuff if you change a type.

I provided an example of where you *don't* have to do that with a strongly typed language.

Just because *one* strongly typed language sucks doesn't mean they all do."
685,,1627951538.0,10.0,"Choosing a language is more often a business decision than a technical one. Most enterprises choose Java because it is a safer business decision than choosing F#. Java has a long history (few bugs and stable) and has enterprise-level support for it. F# is newer riskier, even though technically a lot nicer to use.

Businesses are risk averse. By choosing a language such as F# or Clojure, you are taking on financial risk. There is a risk that you may run into bugs that nobody has run into before. This will consume labour resources on solving bugs that nobody has ever solved before.

As much as it sucks to use, at the end of the day, nobody ever got fired for choosing Java."
686,emannnhue,1627951359.0,30.0,"Well, feel free to cite some of that evidence anytime now"
687,delta_p_delta_x,1627951978.0,19.0,">The most annoying thing to me is that people think they are effective in C#, and think it's a good language - *that kind of shows how much they actually know*.

This right here, people, is a perfect example of irony.

'Good' languages are subjective measures. Sometimes you don't want a type system, sometimes you want strict OO, sometimes you want no state whatsoever and want everything functional/declarative. Dismissing *any* programming language entirely, is counterproductive. 

Like someone else below said: tell me you don't code, without telling me you don't code. You've typed up *ten* responses to this thread on a weekday already, which naturally makes us doubt your capability. 

I haven't even graduated yet, and I'm already in the mindset of 'the language doesn't matter, as long as I get the job done'."
688,d-pv,1628005120.0,6.0,"""I know more and everyone else is delusional."" /u/_tskj_ 

And don't get me wrong, I fucking love F# & Clojure, but I also love C# for a myriad of other reasons. Color me a mix of ""all languages can be neat"" and ""I like the right tool for the job."""
689,Korean_Busboy,1627955189.0,13.0,Lol are you trying to get posted to programmingcirclejerk
690,mobrockers,1627970370.0,21.0,"Actually yes, you sound very much like a student /hobby programmer with very little actual experience."
691,Frozen_Turtle,1627998014.0,1.0,"I don't think I follow - I've inspected F#'s IL multiple times using this tool https://sharplab.io/ (Makes grokking what reflection's doing easier.) What operations does it use that aren't compiled to IL? I know it has its own ""special"" instructions e.g. that one that enables tail recursion... but C# can (should...) use it too. There's nothing preventing C# from using it."
692,TheIncorrigible1,1627950499.0,21.0,"See, I like your opinions until you make statements like these.  You're just making an ass of yourself for no gain."
693,TirrKatz,1627968930.0,1.0,"Yes, I am familiar with DU from F#, and I like them too. Can't wait for type system improvements in C# too."
694,BobSacamano47,1627952160.0,2.0,Interesting. I've never used any of those languages but I'll check them out.
695,Frozen_Turtle,1627964334.0,4.0,">In our annual survey, we expect to sample differently along the distributions of experience, education, developer role, and other characteristics. Do embedded developers make relatively more in Germany than the United States, or do they as a population have more experience there? Can the high salaries of data scientists be accounted for by high education levels alone? To account for this and make the most confident predictions for our users, we built a model for salary that accounts for all of these characteristics at once. ***In the end, some developer roles such as DevOps are associated with higher salaries***

Emphasis mine. Like... here's another piece of data:

https://www.jetbrains.com/lp/devecosystem-2021/#Main_salary-by-job-role

Personally at this point I think it's on your plate to provide evidence/data to the contrary. Simply saying 

> that chart is BS

is kinda... not enough."
696,Frozen_Turtle,1627998708.0,0.0,Nay: https://insights.stackoverflow.com/survey/2021#developer-profile-key-territories
697,Frozen_Turtle,1628005539.0,2.0,"Dude, my list was in response to your

> Even if there's some truth to the chart, tell me, of the languages above C# on there which one has more jobs in the market?

I'm back to being triggered."
698,igouy,1628101397.0,1.0,"Couldn't someone else just as easily claim that IdeaJ [Structural search and replace](https://www.jetbrains.com/help/idea/structural-search-and-replace.html) is the exception, not the rule; and we should take C as representative of how bad or good compile-time checking can be?"
699,daftmaple,1628007885.0,0.0,"For the sake of respect, I am not going to reply to this again. I have to apologise, but you are clearly either trolling or unaware of things.

JavaScript itself is subset of TypeScript, and your JS code can still run in TS codebase because it is a valid TS code. **You are writing a TypeScript code**. Again. I'm not saying any text editor here. You are bringing the argument that the type inference is there and I am pointing out that type inference is TypeScript (not built by, but it is TS). You are using TypeScript without knowing it.

But it's fine. You can keep your belief; I'm not here to change your mind either. Good luck with maintaining your JavaScript code with TS type inference."
700,r0ck0,1628039492.0,1.0,"I'm obviously wasting my time because you're not interested in learning or taking in my points, despite your username.

Your responses just keep confirming my assumptions that you are ignorant of these more advanced typing + extra error reporting features.  

I'm sure you feel like you ""don't need"" them, just like we all do when we're trying to internally justify not learning new things.  You can't understand the benefits of things you've not utilised/learned properly.  So arguing against them is naive.

> But for people who don't consider

> But beyond typing and tooling

It doesn't matter what I say, you'll just respond with ""ok but excluding all the stuff you just listed, there's nothing!"".

> as I've stressed over and over, you can get 90% of without explicit strong types)

You don't know these features, so you don't even have a basis for comparison.  

> what does TS offer?

If you actually are interested, go read through the handbook links I already wasted my time giving you.  

I've already wasted too much of my life arguing with people who have fuckall experience with what they're arguing against.  And yes, I've been guilty of the same too in the past.

Try living up to your username on the occasions were there is something to learn.  Not for me or others, but for yourself."
701,Zyansheep,1628020686.0,3.0,"> I’m aware that people ask for it, I just don’t know why.

It's more explicit compared to a function call when you need to access internal fields from a generic setting and it doesn't limit you with the borrow checker (functions borrow the whole object while direct access allows you to get multiple mutable references to different fields in the same scope)

> It’s not like you can just get more data in to them; you’re fundamentally creating a new type, eg inheritance. 

I'm not sure what you mean by this. Traits aren't types in the sense that they are segments of data in memory. Traits are virtual types that point to specific implementations given a specific structure that implements it (a mapping that happens either at compile time with generics or at runtime with dynamics).

> Traits are not meant for implementation details either (although that can be mimicked by forcing the implementation of detail oriented methods)

I'm very confused, what do you mean by implementation details? Traits are frameworks of functions that structures have to implement."
702,squirtle_grool,1627961536.0,2.0,Don't know where I got that idea about Rust. Thanks for the correction!
703,squirtle_grool,1628203423.0,1.0,"The biggest problem with GC is its unpredictability from the engineer's perspective. I dropped that ref just now because nothing is time-critical at the moment. But unfortunately, there is no such thing as ""free"" GC, and I have no idea when or how I'm going to pay the price. Totally alright if it's happening inside a microservice powering product review reporting. Totally not OK if it's powering a medical device."
704,sqlphilosopher,1628013528.0,1.0,"Idk why are getting downvoted, but I'll try this when I have the time"
705,agent8261,1628040787.0,1.0,">  More code that communicates nothing is bad.

If you're arguing that {} don't have meaning, you're just objectively wrong.

> Curly braces are not needed to convey scope!

Okay. So? How does this support your argument?

>  Braces are an example of the meaningless code that doesn't add anything of value.

Since braces imply scope then you just told me that scope doesn't add anything of value. Which is ludicrous.

Or maybe you're trying to say you don't need to see the scope, because it is not that important? (which would also be silly)

Or maybe you're trying to say you only you want see stuff that is important? which again would imply that you feel scope isn't important.

Explain to me how you aren't saying ""scope is useless""?"
706,noc7c9,1628051361.0,1.0,"> Yeah, that's the 10% actually using TypeScript gives you (you still get many, things like type definition following and automatic imports, without it by just using type inference though).

I suppose we have to disagree on what constitutes 90% of the benefits of typing. I'd consider the example I showed as the bread and butter of what typing actually is. Not supporting that is a deal breaker for me.

BTW the features you listed (auto imports and ""type definition following"" which I assume is Go To Definition) aren't really typescript features, they are IDE features. I expect most IDEs will have that functionality regardless of language, for example PyCharm has those features for Python which also isn't typed.

> Now I haved question: in your entire programming career, how much time have you actually lost to errors where you put a number accidentally in for a string, or vice versa? Because I've been doing web dev for over a decade, and I'd estimate in total during that entire time I've lost under an hour. In my experience such mistakes are not at all common, and when they happen they're extremely obvious (and therefore easy to catch and fix).

That example was meant to be super short. It's supposed to be representative of more complex type errors. I've had several cases of passing objects with the wrong structure (or more accurately the wrong type). And I've definitely lost days maybe even weeks to those kinds of mistakes.

> some projects will benefit from it, and some won't.

IMO nearly every javascript project would be better off with typescript. It's a rare exception that wouldn't benefit. But again that's just my opinion, feel free to disagree."
707,agent8261,1628019660.0,2.0,"> You've decided what's the correct technical decision for every project in the world

I didn't. You did. You told me that the project are short lived, only being build once and never revisited. A project that's never revisited doesn't matter any more. 

I may have said it rudely, but that's just rephrasing what you've said. If you want to build projects that are built once, as quickly as possible, never revisited and nobody cares enough to maintain it, then keep up what you're doing.

I like building stuff that matters though."
708,UrgentlyNeedsTherapy,1627947446.0,14.0,"You edited your comment, and did so immediately before I replied so it doesn't register as edited. This is a really juvenile thing to do."
709,UrgentlyNeedsTherapy,1627947840.0,13.0,"> It is 100% true that some projects benefit from TypeScript. I've said that repeatedly. It's also 100% true that many projects would benefit from sticking to JS.

And this is what I'm disputing. Every JavaScript program *is* a TypeScript program, so by using TypeScript you have all the same options available to you that you would when working with JavaScript *with the added option* that you can explicitly specify types in order to allow for a better editing experience if you so wish.

I can't personally think of any situation where the small overhead of explicitly specifying types isn't more than repaid by the improvements in the editing experience you get, but again, you still have the option of forgoing types completely and writing untyped TypeScript programs if you really want to."
710,UrgentlyNeedsTherapy,1627947361.0,8.0,"> B) even if you did, you'd just be writing Javascript with extra baggage (all those ""any"" types), for no benefit. 

This isn't necessarily true. TypeScript will assume a type is `any` if there's no explicit type given (and no ability to infer type from context), so if you did want to write TypeScript (or more likely migrate existing JavaScript over to TypeScript) then it would be exactly the same as writing normal JavaScript."
711,trinde,1627947371.0,9.0,I'm not saying to always use it. OP seemed to be under the impression that you had to define types for everything in TypeScript.
712,UrgentlyNeedsTherapy,1627991988.0,1.0,"I mean, I *like* strongly-typed languages. I primarily work with C#. I like both C# and TypeScript; my gripe is just with raw JavaScript because of the lack of explicit typing."
713,_tskj_,1627952043.0,-2.0,"Obviously you didn't read the article. F# is where the actual enterprise support is, and is where the bugs aren't and also where stability is. Solving bugs nobody as solved before is a theoretical risk that mostly never materializes and is in any case easily dwarfed by the constant overhead of engineering effort required to do *anything*, including the things everyone has already done, in Java.

I think everything you said is true and is of course the reason for the status quo, but I also believe it is quite obvious that all these businesses and managers are wrong about the calculation (obviously since they have no idea about the topic), and the cost of doing it this way is much greater than they believe, and also the potential savings much higher. That doesn't invalidate your point that nobody got fired for picking Java, that is quite true. But it is also true that everyone is burning obscene amounts of money for no reason."
714,_tskj_,1627951627.0,-21.0,"I'll concede my point about evidence if you concede that there is no evidence that C# is better for web dev than C.

For the record I don't believe that, I of course think C# is a much better tool for that than C! All I'm saying is that it's a continuum and the leap from C to C# is the same as the leap from C# to F#."
715,_tskj_,1627952754.0,-8.0,"I've programmed in more languages than these people have written lines of C#.

I agree with everything you've said. My problem is, to pick a point from your comment, is that these people think Java has a type system or that Java is strict OOP. My problem with this is exactly your point: say you do want a language with a strict type system, a colleague suggesting a language with as weak, ambiguous and inconsistent type system as Java is ridiculous, yet it happens all the time. It's not possible to have a proper engineering discussion when people genuinely argue the pros of a proposition as if they were cons, or the other way around.

The reason I get so fired up by this isn't that people genuinely disagree, it's that people argue nonsense backed by no understanding.

It's people arguing:

""We can't eat at McDonald's, it's *too expensive*""

""I can't by a Porsche, I want a *sports car*""

""I don't want a Tesla, I want an electric car"""
716,_tskj_,1628008634.0,1.0,"Hey I'm a big fan of language design, I only said C# was mediocre. Notice I didn't even call it bad. But you have to agree most people have no idea what tradeoffs their languages have made or what's going on - yet they love praising C# for no reason. ""C# is the greatest language in the world"" but they have only tried Java and learned C in school. Yeah of course you're going to believe that, it *is* the greatest language you have tried.

I'm curious, what are the things you appreciate with C#? Personally I'm very happy we have lambdas and almost first class functions, now also soon free functions."
717,_tskj_,1627956204.0,1.0,"Not sure what that circle jerk would be about, seems kind of passe to suggest C to be a great web language in 2021."
718,_tskj_,1627984714.0,1.0,"That's fine. I have many years of professional C# experience, but I'll admit I have less than a year of professional F#, so maybe that's why? I'm open to the idea I would change my mind if I had more F# experience.

I remember I did like C# when I was a student. How people can spend like ten years programming C# and not wish it was better is what I don't get. It's kind of like people who spend all their days programming on a laptop (like with no keyboard / mouse / monitor). I get that it gets the job done, I'm not saying that it is unprofessional, but I am saying that I personally think that is is a bit weird, and I have higher standards for the tools I use myself 12 hours every day year in and year out."
719,svick,1627999358.0,1.0,"I seem to remember that it was impossible to create F# types like discriminated unions in C#, because F# stored its metadata in a special format only it could understand.

But now [when I look at decompiled F#](https://sharplab.io/#v2:DYLgZgzgPgLgngBwKYAIDKALAhslBeAWACgVSUoUAlJAYxiwDsBzYVAezBQHcBLAExgYUIFGGBssMFACoUrZoOGjxk4mXIoAwjwBONVig4odWPjwCuEJWIkwgA==), I see things like `[CompilationMapping(SourceConstructFlags.SumType)]`, so it's possible that I was wrong or that this changed since then."
720,_tskj_,1627951308.0,-4.0,"Well what do you want me to do you know. People have no interest in learning, no interest in being better at their chosen profession, and no interested in the truth. 

I'm sure none of these people arguing with me know more than one language (barely), much less the history of it or tradeoffs it makes, yet they'll argue to the death about something they haven't the faintest knowledge about. So I'll say it like it is, call the kettle black. If you think C# is even mediocraly good, you're not especially competent. Nothing wrong with that! That's fine. Not everyone has to be great at their jobs."
721,Frozen_Turtle,1627996850.0,3.0,"Well, DUs are already out of C#10... and they've been planning them for quite some time now.

Anyway I'll keep going then cause you don't seem impressed :p

The Hindley-Milner type system means writing types are reduced by like 90%. It means for *significantly* less code to maintain and easier readability. It also means that it's way easier to pass around functions. In my pet project, I'm passing a

`(Func<TemplateRevisionOrdinal => (CommandId => (Kvs.Template => int) => Kvs.Template, Tuple<Kvs.Template option, int>))`

into another higher-ordered function. Having to type out that signature, **and maintaining it**, just isn't fun. But in F#? It's only the name of the function - everything else gets inferred.

F# emphasizes pure code, which comes with incredible testing benefits.

F# has better support for property-based testing. I literally write *zero* unit tests these days, and only write property-based ones, and have 71% coverage. This is *despite* having zero mocks/stubs. You can write/use interfaces in F#... but when thinking about ""pure"" code clicks, suddenly you don't have to. (The fact that I'm also using event sourcing also makes things significantly easier test-ing wise... F# doesn't get all the credit here. But it does get a ton of credit for DUs which makes working with events so much more sane than type sniffing.)

Pattern matching. This deserves its own line.

Active patterns. Also deserves its own line.

Compatibility with C#. Means you can call all your favorite dotnet libraries and have them work as expected. I used Nodatime and Entity Framework (before switching to type providers and then event sourcing).

Type providers. Makes parsing JSON, grokking regex, and working with SQL so much less annoying.

Structural equality.

Units of Measure make strongly typing primitive types (strings/ints/guids) dead simple, so you can't pass a CustomerId where an OrderId shoud've gone.

Immutability by default. Because these days mutability is (potentially premature) optimization.

Literally, the only thing C# has better is tooling. Which is a significant benefit don't get me wrong... but given the choice? I'm so much happier in F#.

https://fsharpforfunandprofit.com/why-use-fsharp/"
722,_tskj_,1627952819.0,2.0,Please do! Using tools that are razor sharp and hand crafted for their purpose are a joy to use!
723,Carson-Drive,1628004808.0,1.0,"This is a general idea, but according to the languages on the list, here's what a job search on Linkedin yielded in the US:

>Clojure --> 778  
>  
>F# --> 184  
>  
>Elixir --> 1,101  
>  
>Erlang --> 350  
>  
>Perl --> 22,358  
>  
>Ruby --> 31,563  
>  
>Scala --> 18,177  
>  
>Rust --> 4,180  
>  
>Go --> 9,707  
>  
>Lisp --> 178  
>  
>APL --> 573  
>  
>Groovy --> 15,973  
>  
>Crystal --> 8,959  
>  
>Haskell --> 792  
>  
>Julia --> 893  
>  
>Objective-C --> 4,993  
>  
>Python --> 183,297  
>  
>TypeScript --> 22,499  
>  
>Swift --> 14,495  
>  
>C# --> 61,848

As I guessed in my other post, only Python would have more jobs than C# in the languages above it on the list."
724,BubuX,1627964652.0,-3.0,"If you want to compare salaries, you gota look at what companies are paying not what some people say they earn."
725,Carson-Drive,1628005790.0,1.0,"I think you should spend more time reading properly before answering rather than throwing virtual tantrums. Here's the list of the languages from the survey list ""**above**"" C#:

\- Clojure, F#, Elixir, Erlang, Perl, Ruby, Scala, Rust, Go, Lisp, APL, Groovy, Crystal, Bash/Shell, PowerShell, Haskell, Julia, Objective-C, Python, R, TypeScript, Swift.

Only Python is being cited above C# from your other link, which again, backs up what I said in my first post."
726,ILikeChangingMyMind,1628008070.0,1.0,"I still submit that writing Javascript code will always be writing Javascript code (and writing PHP code will always be writing PHP code, and writing Scheme code ... you get the idea), **regardless of the technology used to power the editor** ...

... but by Reddit standards that was a decent ""let's agree to disagree"" post :)  Even if you calling me a troll because I disagreed with your point of view (that the editor defines the language being written)."
727,ILikeChangingMyMind,1628045980.0,1.0,"> It doesn't matter what I say, you'll just respond with ""ok but excluding all the stuff you just listed, there's nothing!"".

Give me an actual **feature** (eg. ""automatic imports"")  ... **not** another way to type check (eg. ""type checking a variable that can have two types"") ... and maybe I wouldn't say that?"
728,FunctionalRcvryNetwk,1628027233.0,3.0,">I'm not sure what you mean by this. Traits aren't types in the sense that they are segments of data in memory. Traits are virtual types that point to specific implementations given a specific structure that implements it (a mapping that happens either at compile time with generics or at runtime with dynamics).

State and behaviour? The two fundamental components of an object in rust.

State is unchangeable in the sense of “you get what you get”. Padding aside, there is no adding new fields to a struct, right?

If your trait can specify a field, then a implementation of a trait necessarily defines a new type on top of the struct you’re implementing the trait for.


A “move” function is a primary example of a function that is often made as a trait, and often has a very simple default implementation:

move(x, y)

self.x += x

self.y += y

And so you may be tempted to say that your move trait also defines f32 x and y.

The problem is that if you take a struct Person and then implement the move Trait, you no longer have a Struct Person. You have a Struct Person-Move because a person with move has fields beyond Person.

You cannot just add fields to person. It doesn’t work that way. Normally, you can name this new struct you’ve created and there’s some formal syntax (typically referred to as inheritance). 

Where this gets especially problematic is multiple traits requiring implementation details. 

This leads to some awkward slippery slope style bullshit that will be garbage code.

If you let trait fields be transparent to the user, then you necessarily have to make structs a sum of their parts. That means that just by looking at Person, you don’t actually know what fields are really available because they’re added by a trait. You also end up with unexpected extra fields that you most likely don’t even need just because of this crazy trait inheritance. Also, traits that provide fields with name clashes are problematic.

>I'm very confused, what do you mean by implementation details? Traits are frameworks of functions that structures have to implement.

Implementation details are the concrete details past the declared behaviour. Fields are implementation details.

A detail oriented method would be a getter which forces you to provide an method that would presumably tie to some state."
729,basilect,1627963604.0,6.0,"You're not the first one to make the same mistake, I think there's a persistent misconception that Rust uses Swift-style Automatic Reference Counting as opposed to being RAII"
730,hardolaf,1628014863.0,1.0,Because people don't like hearing anything negative about Rust.
731,ILikeChangingMyMind,1628023368.0,1.0,"All I've been saying, since comment #1 here, is that TS is great for some people, but not for everyone.  That's been my entire thesis the entire time, and everyone responding (including you) has attacked that thesis."
732,ILikeChangingMyMind,1627948293.0,-2.0,"I don't even know how you saw that, it existed for like 0.2 seconds and I didn't even think Reddit would show it yet.   But since you did, apologies: was not trying to do anything ""juvenile"" (to the contrary, I *removed* the ""juvenile"" line).

In any case, the reason the ""hostile"" line existed at all was it took me a sec to realize that you may not be intentionally hostile yourself, you may just have not know about VS Code.  Now that we're clear, what's your response to my actual reply?"
733,ILikeChangingMyMind,1627948120.0,0.0,"Look, pedantically you're right, but we both know you're wrong: you don't do Typescript without writing types."
734,,1627947751.0,1.0,"Got it. In general I have the issue about where to put the bar. If I use too many `any`s then it kinds of looses the interest, but at the same time I'm usually too lazy to type everything.."
735,binarycow,1627992252.0,1.0,"Same for me. Well, that and the fact that there's no standard library."
736,,1627952829.0,10.0,"I've read the article, and the two counterpoints I would raise are:

1. Microsoft are slacking on backing F#
2. Fewer people know F# than C# or Java, which affects onboarding time and size and diversity of the hiring pool.


I raise you [Choose Boring Technology](https://mcfunley.com/choose-boring-technology). In the lifecycle of a software service, you have a certain amount of innovation you can choose to do. Do you choose it on innovating by picking a relatively young language like F# or Clojure, or do you choose to innovate in other ways? It is classic opportunity cost.

By choosing a new language, you are making a choice against other opportunities. It may be worth choosing the language, or it may not be.

For a large organisation that can afford swathes of programmers, they often have enough liquidity to burn on assembling things the long way in an older enterprise language. They are hedging against risk by doing this, and may end up saving money. Predictable is better than unpredictable for these enterprises, even if it has an inverse relationship with productivity."
737,Muoniurn,1628193913.0,1.0,"Well, empirical evidence does show that plenty more companies pay for C# devs for web backend work than they do for C devs. Even if companies are just remotely rational entities, the almost nonexistence of C in backend projects does show it is inferior to memory safe languages."
738,delta_p_delta_x,1627953419.0,7.0,"> is that these people think Java has a type system or that Java is strict OOP

I presume you're implying that Java *doesn't* have a (strong) type system or Java isn't strict OOP (what???). Since when? I doubt the compiler will let you do `""hello"" + 1`, which it will in Python or JS. If you say C is weakly typed, that I understand. By my definitions (and most others), it's generally OK if the compiler allows casting between classes of types, as long as the type expands; contraction (say, `double` to `float` or `long` to `short` will throw warnings in all the C/C++ compilers I've tried) throws warnings, and that is good enough. 

As for Java is not strict OOP? You can't even do hello world in Java without declaring a class, which, in C#, [you now can](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/program-structure/top-level-statements)."
739,d-pv,1628016594.0,1.0,"> I only said C# was mediocre. Notice I didn't even call it bad. 

Tom-a-to to-ma-to.

> ""C# is the greatest language in the world"" but they have only tried Java and learned C in school. 

I don't make a point of arguing against a perceived trend, especially in these loud internet chambers that contain remarkably few people. It's not fun getting correctly called out for constructing a straw man. I think it's best to stick to one's words and to work with that.

> what are the things you appreciate with C#?

Honestly? I'm a simple person. Tooling and ease of environment setup goes a long way with me. I just want to get my environment running and get straight to the problem. The faster I can get into a state of flow or hyper-focus, the better. You can probably see why I like F# and Clojure as well, in that regard. Tooling may not be as robust but it sure is quick to start up. 

Also for C#, though it's certainly not a functional language, LINQ is an absolute joy (though I'm strictly a fan of method syntax over query syntax). High-order functions & extension methods are just too fun."
740,mobrockers,1628054948.0,3.0,"I'm not arguing against your point, I don't care about it one way or the other. I'm simply saying that the way you talk makes you sound like a student who's just heard of the newest craze, things it's hot balls and can't understand why anyone would use anything else. Ie detached from the real world."
741,Frozen_Turtle,1628000384.0,1.0,"Hm, you might be right - I only started using F# about 2 years ago. Roslyn/netcore was a big shakeup, and that could've changed things.

There's some evidence in the other direction though from 2010, which predates Roslyn: https://stackoverflow.com/a/2321121"
742,----_____----,1627952702.0,5.0,https://tenor.com/tmlY.gif
743,Frozen_Turtle,1628005089.0,1.0,Thank you for providing data. Now please include the languages in my other rcomment
744,Frozen_Turtle,1627965160.0,2.0,Sigh.
745,Frozen_Turtle,1628006599.0,2.0,"> I think you should spend more time reading properly before answering rather than throwing virtual tantrums.

And you should provide citations instead of following the same pattern as 3 other people who came before you.

You're still conveniently leaving off the devops languages (which I'll happily combine for the purposes of this discussion) which makes for two languages more popular and higher paying than C#. You slicing off ""designers"" and ""sysadmins"" because they're more popular is also incredible cherry-picking. You might as well slice off Python because it's a data science language - not ""developer-y"" enough. You're also changing the topic, OP's claim was 

> Gotta be one of the best paid too.

Which is *still* demonstrably false. It makes no claims about popularity.

---

Going through your post line by line

>That chart means nothing, if you have experience in C# you will get paid.

Same could be said for literally any language.

> Even if there's some truth to the chart, tell me, of the languages above C# on there which one has more jobs in the market?

Devops and Python.

> I can only think of maybe Python and that's roughly around the same pay grade as C# according to the chart.

And devops.

> You also need to consider the people that answered the survey, this by no means is a representation of how much you will get paid, not even close, since pay grade differs company to company, state to state, and country to country.

Fair, this is a common criticism. But again, we have to work with the data that we have, and not the data that we wish we had. SO has a nice chart here, though it makes no C# claims: https://stackoverflow.blog/2018/09/05/developer-salaries-in-2018-updating-the-stack-overflow-salary-calculator/"
746,r0ck0,1628054232.0,1.0,"Lol, see, exactly as I said... you're saying ""give me features aside from the ones that I'll say are excluded"".

I wasted my time giving you a list of a fuckton of differences that are the difference between vscode JS interference vs typescript, and you just say that you choose to ignore them.

This isn't an argument that either of us are going to ""win"". Because you keep moving the goalposts under the guise of ""all typing is just some kind of typing"".  So what.  

The point isn't about the broadness of the definition of the word ""typing"", even though that's what you're trying to turn this into.

And even beyond typing, there's all the non-typing errors that TS reports too.  Which of course you want to exclude because you also decided that we can't mention anything considering ""tooling"" either.  So you've already excluded everything that could be possible by ignoring the 2x categories that basically cover everything.

It's about vscode JS interference vs typescript... can you not remember what your actual point was here?

Are you a Steven Crowder fan or something?  You're reminding me of his bullshit ""Change my Mind"".. ""debates"" that he does at colleges where any points that don't fit his ever-changing goal post shifting are now suddenly barred from discussion.  Makes me wonder if you even made this your username for the same kinda trolling motivation."
747,Zyansheep,1628062479.0,1.0,"Ah, I see where the misunderstanding is now. I wasn't referring to trait fields as things that are added to structures. I was referring to trait fields more as an alias for existing data in the structure that allows you to directly access it from generic contexts.

Basically I want some syntax sugar for a getter / setter function that plays nicely with the borrow checker."
748,_zenith,1627993687.0,1.0,"Of course, it does have that too, with Rc, it's just opt in"
749,UrgentlyNeedsTherapy,1627948866.0,3.0,"> Now that we're clear, what's your response to my actual reply?

I checked the old project codebase and there wasn't any jsconfig file in there (I didn't author the project, I just did did minor maintenance/updates to it until the full rewrite in TypeScript). In that case, it's possible that VS Code wasn't providing all the help it could have, assuming that file is required to enable type checking.

Also, this codebase was almost entirely React components so most modifications would have been to either the component rendering logic or the set of props that get passed, and I'm not sure how good VS Code is at dealing with *.jsx files as it is with *.js (for TypeScript it works brilliantly with both *.tsx and *.ts files)."
750,UrgentlyNeedsTherapy,1627948581.0,5.0,"I agree that it would be pretty useless to use TypeScript without writing types, and I also really dislike the idea of writing code without explicit types. Compilers are getting better at type inference but there's only so far that can get you before it would literally need to read your mind to go any further.

An example of this would be describing the shape of the data you get back from an API call. In TypeScript, you can explicitly define the expected shape of that data and that makes it a lot easier to make sure you're propagating it correctly through to the logic you use for rendering that data (e.g. via React components)."
751,_tskj_,1627953482.0,1.0,"It is very sad that Microsoft are slacking on F#. Luckily they are halfassedly and slowly porting it to C# though, which people genuinely seem to consider a good thing. What I don't get is why don't the same people consider F# good? When F# has it, it isn't ""enterpise ready"", but when C# has a worse version of it, it suddenly is?

It's the inconsistency that gets me.

I honeslty don't believe picking the sixteen year old F# is ""innovating"" while picking the nineteen year old C# isn't. But I do believe picking better technologies gives you leverage to innovate more. Strange that a technology subreddit like programming doesn't agree."
752,_tskj_,1628199860.0,1.0,"Yeah I agree, and the same will be true for much higher level languages in ten years, no doubt. This just a transition period exactly like 1995-2005 was, and the future after that also."
753,Lhopital_rules,1627959090.0,1.0,"Java definitely has a type system and is strictly typed by some measures, but your example wasn't a good demonstration of that. You can do ""hello"" + 1 in Java and JS just fine, but *not* in Python, because Python, while being dynamically typed, is strictly typed."
754,_tskj_,1627953783.0,0.0,"That's a very rudimentary understanding of what a type system is. 

That is indeed what I was implying, although as I said further down, of course it *has* a type system, but it is so ambiguous, inconsistent and weak as to be almost useless. There is also a very strong argument to be made that Python has a much stronger type system than Java.

This line of arguing ""we want a type system so we will pick Java over Python"" is exactly the kind of ""we can't pick a Tesla because we need an electric car"" argument that I get riled up about.

Edit:

You edited your comment while I was typing so I'll respond to the rest of it here:

Java is absolutely not a strict OOP language. Even suggesting that immediately implies you have no idea what OOP means. Hint: it doesn't mean having the keyword ""class"". Smalltalk is a strict OOP language, Common Lisp is a strict OOP language. Ruby might be argued to be a reasonably strict OOP language. Java isn't. Simple counter point: is the class definition itself in Java an object? No. It isn't. Another easy counter point: are methods objects in Java? No, they aren't.

As for casting, that's not what I'm talking about when I'm talking about a type system. That's just C-isms, I don't care about that either way."
755,delta_p_delta_x,1628046563.0,2.0,">Also for C#, though it's certainly not a functional language, LINQ is an absolute joy (though I'm strictly a fan of method syntax over query syntax). High-order functions & extension methods are just too fun.

100% agreed on this. Easy lambdas (without Java's madness of making *them* classes too), LINQ (especially method syntax—although the naming conventions *are* a little weird), extension methods and *properties* are just a few reasons why I believe C# is far superior to Java.

Personally, I think all languages should trend towards a hybrid of stateless FP and stateful procedural/OOP."
756,_tskj_,1628076371.0,1.0,"I don't know why a craftsman and a professional caring about the quality of his tools and electing to use only the best available makes him sound like a student.

I used to have the mentality of ""whatever gets the job done, I don't care about the language"" mentality when I was younger. Now it's honestly the other way around, the more I use both technologies it boggles the mind how people *can* use the strictly inferior one. Now I know the common retort is that there are ""tradeoffs"", but that is usually made by people who have no idea what those tradeoffs are because they haven't used but one of the technologies. My only conclusion is that none of these people have actually tried the good technologies even once? It's kind of like car enthusiasts arguing against electric cars, and the main argument they put forth is that electric cars are slower. Well, they aren't, they actually have much better acceleration and have about the same top speed. I get that you've invested your whole life in combustion engine cars, but the times have moved on and the arguments you used to make aren't even true any more."
757,_tskj_,1627953014.0,6.0,"If you'll indulge me: fine I was an asshole in my last two comments, I shouldn't have attacked people's competency - but before that, how was I an asshole? If you read my original comment I stated my opinion that C# is a ""mediocre"" language (I didn't even call it bad!), and that there are better alternatives. Why does everyone take that so personally?"
758,Carson-Drive,1628006205.0,1.0,"What other languages? Are you talking about Javascript, Java, SQL, etc? I don't need to include those, I already know there are more jobs for those languages than C#, that was never my argument to begin with. We are only talking about the languages above C# on the Stackoverflow survey, and of those only Python has more jobs."
759,Carson-Drive,1628006946.0,1.0,"This is the last time I'm gonna say this, I was talking about the languages above C# on the Stackoverflow survey. Good day."
760,ILikeChangingMyMind,1628088793.0,1.0,">you keep moving the goalposts 

My goalposts have been the exact same since the beginning: Typescript is good for some projects, JS is good for some projects.  In this entire discussion, you've yet to provide any evidence that Typescript is good for all projects and JS for none.

>Are you a Steven Crowder fan or something? You're reminding me of his bullshit ""Change my Mind"".. ""debates"" 

I have no clue who that even is, but I love how when frustrated fanatics (it's the same whether they're Typescript fanatics, pro-Israel fanatics, whatever) on Reddit always get so amazingly frustrated by my username.  It's like your brain truly can't wrap itself around the idea that the world is a big place, there are *lots* of projects in it, and not all of those projects are identical to your's ... so when you declare your ""universal"" truth (thing you're fanatical about), it just doesn't register why someone wouldn't change their mind to match."
761,steveklabnik1,1628001971.0,2.0,"It’s manual in Rust, rather than automatic."
762,ILikeChangingMyMind,1627953849.0,1.0,"VS Code handles *.jsx just fine (and honestly it'd be a pretty crappy editor if it couldn't).

It sounds to me like you're just not aware of how freaking cool VS Code is, or how much amazing stuff it can do *without* type declarations.  And that's ok (though I'd certainly encourage you to learn: you might even enjoy going back to writing Javascript)!

But I feel like a lot of your TypeScript-loving brethren (not trying to single you out) are just mindless fanatics: they vehemently ""shout down"" (ie. downvote) anyone who says ""don't use TypeScript"" ... regardless of the merits of their argument.  That's super frustrating: educate yourselves fellow devs, instead of downvoting me out of loyalty to a typing system (of all things)!"
763,ILikeChangingMyMind,1627953593.0,0.0,"Totally.  And this is also where my ""90%"" point comes in (as in, ""you can get 90% of TS's benefits without TS by using VS Code with type-checking turned on"") ... there *are* things you lose by not using TypeScript, and being able to type external data sources is one of them.

But if typing your external data isn't important ... you can save a whole lot of time writing types, and still get the same benefits, by just using type-checked JS (in VS Code)."
764,,1627953951.0,6.0,"> I honeslty don't believe picking the sixteen year old F# is ""innovating"" while picking the nineteen year old C# isn't.

I would argue it is, because C# is widely used as opposed to F#. This means it's hard more bug fixes, libraries, and APIs designed for it."
765,delta_p_delta_x,1627953943.0,7.0,"> That is indeed what I was implying, although as I said further down, of course it has a type system, but it is so ambiguous, inconsistent and weak as to be almost useless. There is also a very strong argument to be made that Python has a much stronger type system than Java.

Sure. 

> This line of arguing ""we want a type system so we will pick Java over Python"" is exactly the kind of ""we can't pick a Tesla because we need an electric car"" argument that I get riled up about.

Your analogy makes no sense.

Like I said: most developers haven't got the time and space to argue about languages: they *use* them, faults and all."
766,delta_p_delta_x,1627955217.0,10.0,"Your entire argument is hinged on arguing hopelessly inconsequential semantics and minutiae about Java/C#, and then positing them as not-strongly-typed, and *not* a 'strict OOP' language, when, by any (reasonable) metric, the classic OOP languages would be Java or C#.  

> Simple counter point: is the class definition itself in Java an object? No. It isn't. Another easy counter point: are methods objects in Java? No, they aren't.

If you want 'class definition as object', you have `java.lang.reflect`. If you want methods-as-objects, you can have that too, with Java 8+. These are higher-order functions, and not part of the classical definition of OOP. 

You can perform polymorphism, inheritance, encapsulation, etc etc with Java. OOP enough? For nearly everyone, yes."
767,Muoniurn,1628194285.0,1.0,"In what way is Java’s type system weaker than Python’s? I do know the difference between dynamically and statically typed, but can you show an example that would fly with Java but not with Python?"
768,NostalgiaE30,1627954880.0,3.0,"Hey man you're all over this thread getting downvoted for sharing a different opinion, I just wanted you to know I'm going to end up checking out f# cause of you and what you've said in the thread"
769,Frozen_Turtle,1628007206.0,1.0,aaaaaaaaaaaaaand devops.... jesus christ.
770,Frozen_Turtle,1628007087.0,1.0,Dude... Devops people get paid more than C# people. AND it's more popular than C#... what can you not understand about that.
771,r0ck0,1628120817.0,1.0,"> In this entire discussion, you've yet to provide any evidence that Typescript is good for all projects and JS for none.

Of course I haven't, because I never claimed that.  

And even if that was what was being debated, listing more features wouldn't prove that anyway, no matter what they did. So why even ask for more features in that case? It's an unprovable point entirely that would be pointless to try to argue.  Because you're 100% right on:

> there are lots of projects in it, and not all of those projects are identical to your's ... so when you declare your ""universal"" truth (thing you're fanatical about), it just doesn't register why someone wouldn't change their mind to match.

I 100% agree with this, and make the same point myself all the time.  I'm constantly banging on about how context is relevant to picking one tech over another, and even more generally in almost every possible thing that humans debate.  

I think you've just read some implications in my comments that I wasn't making.  I make the same mistake sometimes in reading others' comments too.    As mentioned in my previous comment, my point here has been that TypeScript gives you things that Vscode JS inference doesn't.  That's it.

Cheers, have a good one."
772,basilect,1628048937.0,1.0,I think you tweeted an example of this exact mistake from some lobsters or orange site commenter at some point
773,_tskj_,1627954567.0,3.0,"I see your argument, I just don't buy it. It's the same as ""open source has more eyes on it, therefore it's safer"". Well just look at OpenSSL, that line of argument just isn't (automatically) true. 

There are more libraries yes but they're way worse, and quality also matters. Either way you can trivially call any C# library from F#, it's a hollow point."
774,_tskj_,1627954377.0,1.0,"I've edited my response above to address your new points.

If my analogy was bad, let me try to explain it: you arguing that we should use Java because it has a type system and Python doesn't, is like arguing we need a Nissan Leaf because we need a cool electric car. It's not that we disagree, it's that you're arguing against the thing you should be arguing for."
775,_tskj_,1627956123.0,-5.0,"Hahaha oh man, Java and C# the classic OOP languages. This is some Poe's law happening right here, I genuinely can't tell if you're trolling me or not.

This is getting completely side tracked, because I don't believe not being OOP is any sort of detractment from any of these languages, in fact C# finally getting free standing functions is a great thing! But dude, don't go around using terms like ""classical definition of OOP"" when you have no idea what it is. Inheritance and encapsulation are not part of it, and neither are Java or C#. Smalltalk and Simula would be the classic OOP languages, and the coiner of the term ""object oriented"" himself, Alan Kay, considered only Smalltalk and CLISP to be genuinely OOP.

I don't know if I'm starting another flame war here, but I also believe OOP to be a failed paradigm. Thankfully here the industry agrees with me, and OOP isn't exactly considered modern any more."
776,_tskj_,1628200856.0,1.0,"Sure, let me try to think of one on the top of my head. Imagine you have a method that accept a List<Animal>. You have a List<Cat>, and Cat obviously inherits from Animal like you can imagine. Can you pass that list of cats to the method accepting a list of animals? Obviously you should, but in Java you can't, because it has a terribly inconsistent type system. In Python of course you can."
777,_tskj_,1627956275.0,3.0,Thanks! Hope you'll have a genuinely good time.
778,Frozen_Turtle,1627962608.0,5.0,"Welcome!

This is a good post/series to get started with: https://fsharpforfunandprofit.com/posts/fsharp-in-60-seconds/

Honestly though the *real* best way to get started is to download VS Code and start playing around in F# interactive: https://docs.microsoft.com/en-us/dotnet/fsharp/get-started/get-started-vscode

If you wanna use the absolute latest hottest thing, try F# Notebooks https://www.compositional-it.com/news-blog/a-brief-introduction-to-f-notebooks/

Doing really hammers home what you read.

Once you grok the syntax, give this page/video a gander: https://fsharpforfunandprofit.com/rop/

If you get stuck on anything feel free to @ me or just post in /r/fsharp - we're friendly!

(Also... don't get hung up on trying to understand monads/functors/category theory bullshit. You can get very, very far by just using the language and ignoring all the theory. Eventually you may want to explore the theory, but it is very much optional and not required.)"
779,TheIncorrigible1,1627955759.0,5.0,"F# is a lovely language that enjoys having the .NET ecosystem for free. If you pick a FP lang, can't go wrong with F#"
780,Carson-Drive,1628007289.0,1.0,Is devops a language?
781,ILikeChangingMyMind,1628126089.0,1.0,">Of course I haven't, because I never claimed that.

>I 100% agree with this

All I've ever asserted throughout this whole discussion was just that (that TS isn't better for 100% of projects; if you don't believe me, scroll up to my original post).  It sounds like we were so busy arguing we missed agreeing ;)"
782,,1627955586.0,5.0,"> Either way you can trivially call any C# library from F#, it's a hollow point.

I actually didn't know that. Thanks for that."
783,delta_p_delta_x,1627956685.0,10.0,"> I don't know if I'm starting another flame war here, but I also believe OOP to be a failed paradigm.

And I suppose that Java, C# and C++ taking [5th, 7th, and 10th places respectively on this very survey](https://insights.stackoverflow.com/survey/2021#section-most-popular-technologies-programming-scripting-and-markup-languages) are examples of 'failed paradigms'? Again, I don't know what *your* metric for 'paradigm failure' is, but by virtue of the fact that everyone uses it, it is successful."
784,Muoniurn,1628230548.0,1.0,"No,  a List of Animals is not necessarily a List of Cats. Java allows for fine-grained control on variance. You have to write List<T extends Animal> to have what you want. 

Arrays do have this variance model by default and it does allow for “poisioning” them. But there are many other cases as well, eg. a writer where you have to be less specific than the generic type and Java does allow that as well with SomeWriter<T super Something>"
785,NostalgiaE30,1627964136.0,1.0,Oh wow thanks for this I wasn't expecting that. I'm already familiar with react but I've mostly worked with front end stuff how well does that translate to f#?
786,Frozen_Turtle,1628007338.0,1.0,"Dude, if you can't give me the charity of combing bash and powershell... this conversation is over."
787,_tskj_,1627957422.0,0.0,"Java and C# are successful, what I was getting at was that they aren't strict OOP (thank god). And people certainly don't use them object orientedly in industry. You might have heard the addage ""composition of inheritance"", which is essentially anti OOP.

For some reason it's still often taught in school though. Not sure why that is."
788,_tskj_,1628242296.0,1.0,"List of Animals isn't a list of Cats, but a List of Cats *is* a list of Animals. Scala allows you to control variance, Java doesn't really. There is no excuse for Java having a shitty type system."
789,Frozen_Turtle,1627964973.0,2.0,"You're in luck - there's an F# to Javascript transpiler called [Fable](https://fable.io/) that's battletested and well vetted. Here's an intro video: https://www.youtube.com/watch?v=5191ytFmG_A

If you're used to Redux, you may know that it was inspired by ""the Elm architecture"". F# frontend apps use ""Elmish"", which is (of course) also inspired by Elm. You can do fullstack F#, from backend to frontend with this transpiler (similar to how Node makes for fullstack Javascript.) This is known as the ""SAFE Stack"" (Saturn/Azure/Fable/Elmish) but really Saturn and Azure are optional. Heck Elmish is optional too if you really want. Anyway here's more deets: https://safe-stack.github.io/docs/component-elmish/"
790,Carson-Drive,1628007653.0,1.0,"You're either not very experienced or you just don't understand. I'm going to go with the former since it sounds more like it. DevOps is a position, it's like saying a Web Developer, Mobile Developer, Data Scientist, System Admin, Project Manager, etc. This has nothing to do with language, a DevOps may work with PowerShell or they may not, it's not a requirement and it all depends on the job they're on."
791,Muoniurn,1628194194.0,1.0,"What about “OOP doesn’t have one strict definition”, so by all means Java and C# is very much OOP due to having many OOP features. 

Seriously, Alan Kay may have coined the term, but he doesn’t have exclusive say into the terminology. The field decided his definition is too strict."
792,Muoniurn,1628243267.0,1.0,"I written the exact syntax how it is possible in Java. The default for generics is invariance, which is the only sane default. 

Hell, Scala uses almost the same syntax as Java, it just does it at use-site."
793,NostalgiaE30,1627968587.0,1.0,Dude thanks so much for this I really appreciate I've been looking to switch over to   full stack for a while you've been very helpful
794,Frozen_Turtle,1628007761.0,1.0,"You are being *incredibly* pedantic.

Powershell/Bash as a combined language earns more than C#. So does Python. Deal with it."
795,_tskj_,1628200060.0,1.0,"The current definition is meaningless, what in the world do you imagine ""encapsulation"" really means?"
796,_tskj_,1628245910.0,1.0,"What, no, why would the default variance for lists be invariance? Clearly a list of cats is a list of animals. This is how it works in every sensible language."
797,Frozen_Turtle,1628003357.0,1.0,"Anytime!

Admittedly one of the cons of F# is the size - we're *not* large. The F# community is passionate as hell though, so if you get stuck/have questions don't be afraid to ask! Getting technical questions answered on StackOverflow with the F# tag is the most obvious way, but there's also /r/fsharp, [a Discord](https://discord.gg/R6n7c54), and [a Slack](https://fsharp.org/guides/slack/) (though you need to join the foundation, i.e. give them your email.) The Slack #beginners channel is particularly active/nice :)"
798,Muoniurn,1628246417.0,1.0,"So what about passing List<Cat> to a variable having type List<Animal> and then adding a Dog to that. Now the original List<Cat> would fail with a ClassCastException when listing its elements, that is if Java would allow your naive “solution”. But java generics *are* type-safe so cast exceptions will not happen unless one does explicit casts, or uses List (without generics)."
799,_tskj_,1628246871.0,1.0,"Adding an element to a list produces a new list. In your example, adding a dog to a list of animals yields a new list of animals, which is completely fine. That Java allows arbitrary uncontrolled mutations is in itself an insane design decision. High level languages do not allow that, of which Java is not."
800,Muoniurn,1628247847.0,2.0,"Wtf, you have no idea what are you talking about. High level languages doesn’t mean immutability, wtf? In java, lists are mutable by default so lists are invariant, which makes sense. Immutability is cool, but it is by no means the only possible way to architect applications. You do occasionally need mutability, if for nothing else, performance reasons. 

How about accepting that you were just wrong?"
801,_tskj_,1628251520.0,1.0,"Actually it does. In Clojure for instance there are, what, four different semantics for mutability? Java has no concept of this at all and is in general a very low level language. Manual locking and synchronizations? If you only have experience with Java it might seem like a decently high level language because it has a garbage collector, but that is only a result of inexperience and lack of knowledge."
802,Muoniurn,1628278034.0,2.0,"What jf I tell you that I do absolutely know Clojure as well as several other languages. Java exposes concurrency primitives, and of course high levelness is a spectrum, some higher than others. But after a given level of abstraction it is sort of meaningless. You can create concurrency libraries that are almost native like, so that you don’t have to use any of the primitives."
